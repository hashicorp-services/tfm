{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TFM Docs","text":"<p>Note: This CLI currently does not have official support!</p> <p>TFM is currently being developed and tested by interested parties.</p> <p>The following is a summary of a real example use case from a real TFE customer. </p> <p>Please reach out to one of our listed contact methods.</p> <p>tfm is a standalone CLI for Terraform Community Edition, Terraform Cloud, Terraform Enterprise migrations.</p> <p>HashiCorp Implementation Services (IS) has identified a need to develop a purpose built tool to assist our engagements, partners, and customers during:</p> <ul> <li>Terraform open source / community edition / core to TFC/TFE</li> <li>TFE to TFC</li> <li>TFC to TFE</li> <li>1 TFC Organization to another TFC Organization</li> </ul> <p>Note: The Terraform Community Edition migration as part of <code>tfm</code> has been deprecated in favor of tf-migrate. The CE migration feature has not been removed from <code>tfm</code> however it will not be receiving further developments.</p>"},{"location":"#installation","title":"Installation","text":"<p>Binaries are created as part of a release, check out the Release Page for the latest version.</p>"},{"location":"#macos-installation-amd64","title":"MacOs Installation amd64","text":"<pre><code>version=\"x.x.x\"\ncurl -L -o tfm \"https://github.com/hashicorp-services/tfm/releases/download/${version}/tfm_darwin_x86_64\"\nchmod +x tfm\n</code></pre>"},{"location":"#macos-installation-arm64","title":"MacOs Installation arm64","text":"<pre><code>version=\"x.x.x\"\ncurl -L -o tfm \"https://github.com/hashicorp-services/tfm/releases/download/${version}/tfm_darwin_arm64\"\nchmod +x tfm\n</code></pre> <p>Note: <code>tfm</code> CLI is currently not developer-signed or notarized and you will run into an initial issue where <code>tfm</code> is not allowed to run. Please follow \"safely open apps on your mac\" to allow <code>tfm</code> to run</p>"},{"location":"#linux-installation","title":"Linux Installation","text":"<pre><code>  version=\"x.x.x\"\ncurl -L -o tfm \"https://github.com/hashicorp-services/tfm/releases/download/${version}/tfm_linux_x86_64\"\nchmod +x tfm\n</code></pre>"},{"location":"#windows-installation","title":"Windows Installation","text":"<pre><code>  version=\"x.x.x\"\ncurl -L -o tfm.exe \"https://github.com/hashicorp-services/tfm/releases/download/${version}/tfm_windows_x86_64.exe\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#print-the-tfm-cli-help","title":"Print the TFM CLI help","text":"<p><code>tfm -h</code></p> <pre><code>tfm -h\nA CLI to assist with Terraform community edition, Terraform Cloud, and Terraform Enterprise migrations.\n\nUsage:\n  tfm [command]\nAvailable Commands:\n  copy        Copy command\ncore        Command used to perform terraform open source (core) to TFE/TFC migration commands\n  delete      delete command\ngenerate    generate command for generating .tfm.hcl config template\n  help        Help about any command\nlist        List command\nlock        Lock\n  unlock      Unlock\n\nFlags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ~/.tfm.hcl).\n  -h, --help            help for tfm\n      --json            Print the output in JSON format\n  -v, --version         version for tfm\n\nUse \"tfm [command] --help\" for more information about a command.\n</code></pre>"},{"location":"#pre-requisites","title":"Pre-Requisites","text":"<p>The following prerequisites are used when migrating from or to TFE or TFC from TFE or TFC.</p> <ul> <li>A tfm config file</li> <li>A TFC/TFE token with for the source TFE/TFC Organization that you are migrating from.</li> <li>A TFC/TFE token with for the source TFE/TFC Organization that you are migrating to.</li> </ul> <p>For which token type to use, we recommend either Team or Personal token. We do not recommend Organization token due to the limited permissions Org tokens have. Please refer to Access Levels for the different Token types and their permissions.</p>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>The following environment variables can be set or used to override existing config file values.</p> <pre><code>export SRC_TFE_HOSTNAME=\"tf.local.com\"\nexport SRC_TFE_ORG=\"companyxyz\"\nexport SRC_TFE_TOKEN=\"&lt;user token from source TFE/TFC with permissions&gt;\"\nexport DST_TFC_HOSTNAME=\"app.terraform.io\"\nexport DST_TFC_ORG=\"companyxyz\"\nexport DST_TFC_TOKEN=\"&lt;user token from source TFE/TFC with permissions&gt;\"\nexport DST_TFC_PROJECT_ID=\"Destination Project ID for workspaces being migrated by tfm. If this is not set, then Default Project is chosen\"\n</code></pre>"},{"location":"#config-file","title":"Config File","text":"<p>A HCL file with the following as the minimum located at <code>/home/user/.tfm.hcl</code> or specified by <code>--config config_file</code>. You can also run <code>tfm generate config</code> to create a tempalte config file for use.</p> <p>[!NOTE] Use the <code>tfm generate config</code> command to generate a sample configuration for quick editing.</p> <pre><code>src_tfe_hostname=\"tf.local.com\"\nsrc_tfe_org=\"companyxyz\"\nsrc_tfe_token=\"&lt;user token from source TFE/TFC with owner permissions&gt;\"\ndst_tfc_hostname=\"app.terraform.io\"\ndst_tfc_org=\"companyxyz\"\ndst_tfc_token=\"&lt;user token from destination TFE/TFC with owner permissions&gt;\"\ndst_tfc_project_id=\"Destination Project ID for workspaces being migrated by tfm. If this is not set, then Default Project is chosen\"\n</code></pre>"},{"location":"#copy-workspaces-into-projects","title":"Copy Workspaces into Projects","text":"<p>By default, a workspace will be copied over to the Default Project in the destination (eg TFC). Users can specify the project ID for the desired project to place all workspaces in the <code>tfm copy workspace</code> run.</p> <p>Utilize <code>tfm list projects --side destination</code> to determine the <code>project id</code>.</p> <p>Set either the environment variable:</p> <pre><code>export DST_TFC_PROJECT_ID=prj-XXXX\n</code></pre> <p>or specify the following in your <code>~/.tfm.hcl</code> configuration file.</p> <pre><code>dst_tfc_project_id=prj-xxx \n</code></pre>"},{"location":"#workspace-list","title":"Workspace List","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of workspaces from the source TFE can be specified. <code>tfm</code> will use this list when running <code>tfm copy workspaces</code> and ensure the workspace exists or is created in the target.</p> <pre><code>#List of Workspaces to create/check are migrated across to new TFC\n\"workspaces\" = [\n  \"appAFrontEnd\",\n  \"appABackEnd\",\n  \"appBDataLake\",\n  \"appBInfra\"\n]\n</code></pre>"},{"location":"#assign-agent-pools-to-workspaces","title":"Assign Agent Pools to Workspaces","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-agent-pool-ID=destination-agent-pool-ID</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspaces --agents</code> to look at all workspaces in the source host with the assigned source agent pool ID and assign the matching named workspace in the destination with the mapped destination agent pool ID.</p> <pre><code># A list of source=destination agent pool IDs TFM will look at each workspace in the source for the source agent pool ID and assign the matching workspace in the destination the destination agent pool ID.\nagents-map = [\n  \"apool-DgzkahoomwHsBHcJ=apool-vbrJZKLnPy6aLVxE\",\n  \"apool-DgzkahoomwHsBHc3=apool-vbrJZKLnPy6aLVx4\",\n  \"apool-DgzkahoomwHsB125=apool-vbrJZKLnPy6adwe3\",\n  \"test=beep\"\n]\n</code></pre>"},{"location":"#copy-variable-sets","title":"Copy Variable Sets","text":"<p>To copy ALL variable sets from the source to the destination run the command: <code>tfm copy varsets</code></p> <p>To copy only desired variable sets, provide an HCL list in the <code>.tfm.hcl</code> configuration file using the snyntax <code>\"source-varset-name=destination-varset-name\"</code>. This list will be converted to a map. tfm will copy only the source variable sets provided on the left side of the <code>=</code>. The right side of the <code>=</code> can optionally be a different name to allow you to copy the variable set with a new name. Both sides of the <code>=</code> must be populated and <code>varsets-map</code> cannot be empty if it is defined.</p> <p>Example configuration file:</p> <pre><code>varsets-map = [\n  \"Azure-creds=New-Azure-Creds\",\n  \"aws-creds2=New-AWS-Creds\",\n  \"SourceVarSet=DestVarSet\"\n ]\n</code></pre>"},{"location":"#assign-vcs","title":"Assign VCS","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-vcs-oauth-ID=destination-vcs-oauth-id-ID</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspaces --vcs</code> to look at all workspaces in the source host with the assigned source VCS oauth ID and assign the matching named workspace in the destination with the mapped destination VCS oauth ID.</p> <pre><code># A list of source=destination VCS oauth IDs. TFM will look at each workspace in the source for the source VCS oauth ID and assign the matching workspace in the destination with the destination VCS oauth ID.\nvcs-map=[\n  \"ot-5uwu2Kq8mEyLFPzP=ot-coPDFTEr66YZ9X9n\",\n  \"ot-gkj2An452kn2flfw=ot-8ALKBaqnvj232GB4\",\n\n]\n</code></pre>"},{"location":"#rename-workspaces-in-destination-during-a-copy","title":"Rename Workspaces in destination during a copy","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-workspace-name=destination-workspace-name</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspace</code> to look at all workspaces in the source host and rename the destination workspace name. NOTE: Using this configuration in your HCL config file will take precedence over the other Workspace List which only lists source workspace names.</p> <pre><code># A list of source=destination workspace names. TFM will look at each source workspace and recreate the workspace with the specified destination name.\n\"workspaces-map\" = [\n   \"tf-demo-workflow=dst-demo-workflow\",\n   \"api-test=dst-api-test\"\n   ]\n</code></pre>"},{"location":"#assign-ssh","title":"Assign SSH","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-ssh-key-id=destination-ssh-key-id</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspaces --ssh</code> to look at all workspaces in the source host with the assigned source SSH key ID and assign the matching named workspace in the destination with the mapped SSH key ID.</p> <pre><code># A list of source=destination SSH IDs. TFM will look at each workspace in the source for the source SSH  ID and assign the matching workspace in the destination with the destination SSH ID.\nssh-map=[\n  \"sshkey-sPLAKMcqnWtHPSgx=sshkey-CRLmPJpoHwsNFAoN\",\n]\n</code></pre>"},{"location":"#contacts","title":"Contacts","text":"<ul> <li>Initial Slack Channel for developement: #ps-offering-tfm</li> <li>Google Group TFM Dev Team: svc-github-team-tfm@hashicorp.com</li> <li>Got an idea for a feature to <code>tfm</code>? Submit a feature request or provide us some feedback.</li> </ul>"},{"location":"faqs/","title":"TFM FAQs","text":""},{"location":"faqs/#who-is-tfm-developed-for","title":"Who is <code>tfm</code> developed for?","text":"<p>Engineers/Operators that need to migrate terraform community edition code management to TFC/TFE.</p> <p>Engineers/Operators that manage/admin Terraform Enterprise/Cloud organizations that need to perform a migration of workspaces.</p>"},{"location":"faqs/#what-is-tfm-intended-to-do","title":"What is <code>tfm</code> intended to do?","text":"<p><code>tfm</code> will assist with migration of:</p> <ul> <li>Terraform open source / community edition / core to TFC/TFE</li> <li>TFE to TFC</li> <li>TFC to TFE</li> <li>1 TFC Organization to another TFC Organization</li> </ul> <p>Note: The Terraform Community Edition migration as part of <code>tfm</code> has been deprecated in favor of tf-migrate. The CE migration feature has not been removed from <code>tfm</code> however it will not be receiving further developments.</p>"},{"location":"faqs/#migrations-of-workspaces","title":"Migrations of workspaces","text":"<p>From a customer journey perspective, it will be used initially to copy any workspaces that need to be migrated (<code>tfm copy workspaces</code>). Each aspect of a workspace can be copied/migrated to the destination by specifying flags. This allows flexibility and control. Check out the pre-requisites when migrating a workspace.</p>"},{"location":"faqs/#idempotent-migrations","title":"Idempotent Migrations","text":"<p>We have designed <code>tfm</code> to be run more than once on an existing source workspace/s. This will allow users to not only update any changes from the source workspace, but keep tabs on workspaces that have yet to be migrated to the destination.</p>"},{"location":"faqs/#cli-usage","title":"CLI Usage","text":"<p>The main usage will be used by TFE admins carefully migrating select workspaces for migration to TFE/TFC as shown in our example migration scenario.</p> <p>We also envision some users to use the CLI tool in a pipeline and add workspaces over time for migration by using the <code>workspaces-map</code> or <code>workspace-list</code> options in the config file. Check out an example github actions pipeline. This allows teams to plan gradually which workspaces are ready for migration.</p>"},{"location":"faqs/#future-migrations","title":"Future Migrations","text":"<p>Migrations are usually a planned projects that will occur over time. Often there will need to be a final cutover where <code>tfm</code> can be used to update any changes from the source OR not all workspaces can be easily migrated initially that require more technical preparations before migration.</p>"},{"location":"faqs/#customer-journey","title":"Customer Journey","text":"<p>Check out customer journey example using <code>tfm</code> and what a Professional Services engagement looks like.</p>"},{"location":"faqs/#can-tfm-perform-a-tfe-to-tfe-migration","title":"Can <code>tfm</code> perform a TFE to TFE migration?","text":"<p>Yes, we developed <code>tfm</code> to utilize the <code>go-tfe</code> library which is used for both Terraform Enterprise as well as Terraform Cloud. The following is what is capable</p> <ul> <li>TFE to TFC (Primary use case)</li> <li>TFE to TFE</li> <li>TFC to TFC</li> <li>TFC to TFE</li> <li>TFC ORG 1 to TFC ORG 2</li> </ul>"},{"location":"faqs/#what-constraints-are-there-with-migration-to-tfc","title":"What constraints are there with migration to TFC?","text":"<p>The following are environment/configuration constraints where a migration of workspaces cannot occur:</p> <ul> <li>TFE Instances utilizing a Custom (Alternative Terraform Build Worker image) as TFC does not support this feature.</li> <li>TFE environments utilizing Network Mirror Provider protocol</li> <li>A strategy for this is to change the workspace configuration in TFC to utilize Cloud Agents which requires further strategy and planning.</li> <li>Workspaces pre 0.12 cannot use Cloud Agents in TFC.</li> <li>They would need to be upgraded by workspace owners before migrating to TFC.</li> <li>Customers with ONLY private Version Control Systems (VCS), TFC does have a list of supported VCS solutions, however if private, some features of TFC may not work as intended.</li> <li>Workspaces that utilize <code>local-exec</code> or <code>remote-exec</code> provisioner.</li> </ul>"},{"location":"faqs/#does-tfm-store-the-state-file-to-disk","title":"Does tfm store the state file to disk?","text":"<p>It depends.</p> <p>For the <code>tfm copy state</code> command:</p> <p>No tfm streams the statefile from the source to memory and then sends it to the destination. No statefile or any kind of file is written to disk. The statefile is also encrypted when fetched from the TFE API.</p> <p>For the <code>tfm core getstate</code> command:</p> <p>Yes. tfm downloads the state to disk before uploading it to TFC/TFE. The <code>tfm core cleanup</code> command can be used to remove it easily after migration.</p>"},{"location":"faqs/#will-this-work-on-a-very-old-version-of-terraform-enterprise","title":"Will this work on a very old version of Terraform Enterprise?","text":"<p>In all honesty, we have not tested in anger what versions of <code>go-tfe</code> will not work with <code>tfm</code>.  Internal HashiCorp engineers do have the ability to spin up an older version of TFE test. Let us know if you need help, we have a test-pipeline in the project's github actions/test directory that can help populate TFE.</p>"},{"location":"faqs/#is-tfm-supported-by-our-hashicorp-global-support-team","title":"Is <code>tfm</code> supported by our HashiCorp Global Support Team?","text":"<p>Currently there is no official support whatsoever for <code>tfm</code>. This project was developed intially to assist TFE/TFC Administrators/Engineers if a migration project was to occur.</p>"},{"location":"faqs/#i-have-a-feature-request","title":"I have a feature request","text":"<p>Check out Future Work/Roadmap or our Github Projects page.</p> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request!</p>"},{"location":"feedback/","title":"Feedback","text":"<p>If you have issues with the embedded form, you can also access it here.</p> Loading\u2026"},{"location":"about/contributing/","title":"Contributing","text":"<p>When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. </p> <p>Please note we have a code of conduct, please follow it in all your interactions with the project.</p>"},{"location":"about/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure any install or build dependencies are removed before the end of the layer when doing a     build.</li> <li>Update the README.md and CHANGELOG.md with details of changes to the interface, this includes new environment     variables, exposed ports, useful file locations and container parameters.</li> <li>Request review from a repo maintainer and work to resolve any feedback/suggestions.</li> </ol>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"about/contributing/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/contributing/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/contributing/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/contributing/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"about/contributing/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"about/contributing/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"about/purpose/","title":"Why TFM?","text":"<p>If you are asking why does this CLI exist, read on...</p> <p>HashiCorp Implementation Services have been helping customers get started with Terraform Enterprise in the last 5-6 years. As some of these customers have matured and situations have changed, some customers are asking how they would migrate to Terraform Cloud.</p> <p>A small group of individuals have already gone through some skunk work engagements for existing customers to migrate from TFE to TFC, however it was very clunky, slow and very custom. At the same time the experience and knowledged gained have insightful on what was needed if a tool was made to assist migrations of this very nature.</p> <p>There have been multiple examples in the community of a tool or scripts to assist with migration, however we wanted to provide a CLI binary that could be used in our initial migration services offering as well as left with the customer to continue any future migrations.</p> <p>Our migration services program would :</p> <ul> <li>teach the customer how to migrate</li> <li>plan how they can migrate from TFE to TFC</li> <li>assist with a few migrations using our tool</li> <li>then allow them to continue migrations in futures for any workspaces that required more time and planning.</li> </ul> <p>We also had aspirations that this tool could be repeatably used by us or a customer in a CI pipeline of some sort to ensure or keep track of migrations of workspaces from TFE to TFC.</p>"},{"location":"about/release_notes/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/release_notes/#0140-2025-05-16","title":"0.14.0 (2025-05-16)","text":""},{"location":"about/release_notes/#features","title":"Features","text":"<ul> <li>Implements #305</li> <li>When using the remote state copy command, support workspace names changing between source and destination.</li> </ul>"},{"location":"about/release_notes/#chore","title":"Chore","text":"<ul> <li>Fix links on tfm docs site</li> </ul>"},{"location":"about/release_notes/#0130-2025-05-07","title":"0.13.0 (2025-05-07)","text":""},{"location":"about/release_notes/#features_1","title":"Features","text":"<ul> <li>Implements [#285] (https://github.com/hashicorp-services/tfm/issues/285)</li> <li>When migration workspace VCS connections, the source and destination VCS type don't need to match.</li> </ul>"},{"location":"about/release_notes/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixes issue [#286] (https://github.com/hashicorp-services/tfm/issues/286)</li> <li>Removes the unused flags from the copy workspaces command</li> </ul>"},{"location":"about/release_notes/#chore_1","title":"Chore","text":"<ul> <li>Update Codeowners: Thank you @carljavier &amp; @Josh-Tracy for all your <code>tfm</code> contributions!</li> <li>Remove pr-title action</li> <li>Update go-tfe version. Unable to update viper due to breaking change.</li> </ul>"},{"location":"about/release_notes/#0121-2025-02-27","title":"0.12.1 (2025-02-27)","text":""},{"location":"about/release_notes/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fixes issue #283</li> <li>Remove the nuke command due to the above issue</li> </ul>"},{"location":"about/release_notes/#0120-2025-02-14","title":"0.12.0 (2025-02-14)","text":""},{"location":"about/release_notes/#features_2","title":"Features","text":"<ul> <li>Add Run Trigger support to copy a workspaces Run Trigger setting [#281]</li> </ul>"},{"location":"about/release_notes/#chore_2","title":"Chore","text":"<ul> <li>Update documentation</li> <li>Update e2e tests</li> </ul>"},{"location":"about/release_notes/#0113-2025-01-29","title":"0.11.3 (2025-01-29)","text":""},{"location":"about/release_notes/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Checks if the OAuthID is nil before output. [#273]</li> </ul>"},{"location":"about/release_notes/#0112-2025-01-28","title":"0.11.2 (2025-01-28)","text":""},{"location":"about/release_notes/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Moves the GHA VCS list into it's own command due to token limitations. [#272]</li> </ul>"},{"location":"about/release_notes/#0111-2025-01-24","title":"0.11.1 (2025-01-24)","text":""},{"location":"about/release_notes/#features_3","title":"Features","text":"<ul> <li>Update the <code>list vcs</code> command and the <code>copy workspaces --vcs</code>  flag to support GitHub App connections instead  of only support OAuth VCS connections. [#268]</li> </ul>"},{"location":"about/release_notes/#0110-2025-01-10","title":"0.11.0 (2025-01-10)","text":""},{"location":"about/release_notes/#features_4","title":"Features","text":"<ul> <li>Add flag to copy the workspace state sharing settings [#254]</li> </ul>"},{"location":"about/release_notes/#0100-2024-11-20","title":"0.10.0 (2024-11-20)","text":""},{"location":"about/release_notes/#features_5","title":"Features","text":"<ul> <li>Add flag to sensitive variables from being copied [#235]</li> </ul>"},{"location":"about/release_notes/#chore_3","title":"Chore","text":"<ul> <li>Updated Dependencies</li> <li>Replaces gox for tfm builds</li> <li>Updated GitHub Actions</li> </ul>"},{"location":"about/release_notes/#093-2024-03-27","title":"0.9.3 (2024-03-27)","text":""},{"location":"about/release_notes/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>TFE 202303-1 and earlier Support Fix list workspaces command for TFE deployments prior to the introduction of projects.</li> </ul>"},{"location":"about/release_notes/#092-2024-03-27","title":"0.9.2 (2024-03-27)","text":""},{"location":"about/release_notes/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>TFE 202401-2 Support Upgrade go-tfe to 1.48 to support TFE 202401-2 and later versions of TFE.</li> </ul>"},{"location":"about/release_notes/#091-2024-03-11","title":"0.9.1 (2024-03-11)","text":""},{"location":"about/release_notes/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>State Copy Workspace Erorr Log Fix error log name to support Windows</li> </ul>"},{"location":"about/release_notes/#090-2024-03-07","title":"0.9.0 (2024-03-07)","text":""},{"location":"about/release_notes/#features_6","title":"Features","text":"<ul> <li>Terraform CE to TFC/TFE Migration Support for GitLab VCS.</li> <li>Terraform CE to TFC/TFE Migration New required configuration file setting <code>vcs_type</code> introduced for defining a supported vcs type</li> <li>Terraform CE to TFC/TFE Migration <code>tfm core remove-backend --comment</code> new <code>--comment</code> flag added to optionally comment out <code>backend {}</code> configurations instead of deleting them.</li> </ul>"},{"location":"about/release_notes/#080-2024-03-01","title":"0.8.0 (2024-03-01)","text":""},{"location":"about/release_notes/#features_7","title":"Features","text":"<ul> <li>Terraform CE to TFC/TFE Migration TFM now supports discovery and migration of VCS repos configured as monorepos ( repos with more than 1 terraform configuration ) and terraform community edition workspaces. See docs and <code>tfm core -h</code> for more info.</li> <li>Terraform CE to TFC/TFE Migration: <code>tfm core init-repos</code> command added to assist in migrations. Builds a metadata file in the tfm working directory with information about how each VCS repo is configured.</li> <li>tfm core migrate: <code>tfm core migrate</code> command now executes the <code>tfm core init-repos</code> command.</li> </ul>"},{"location":"about/release_notes/#070-2024-02-21","title":"0.7.0 (2024-02-21)","text":""},{"location":"about/release_notes/#features_8","title":"Features","text":"<ul> <li>Terraform CE to TFC/TFE Migration Support for assisting with terraform community edition migrations to TFC/TFE managed workspaces. See docs and <code>tfm core -h</code> for more info.</li> <li>Copy Projects: <code>tfm copy projects</code> feature added</li> </ul>"},{"location":"about/release_notes/#060-november-08-2023","title":"[0.6.0] (November 08, 2023)","text":"<ul> <li>Added command to lock and unlock workspaces. [#155]</li> <li>Updated Dependencies</li> <li><code>go-tfe</code> from 1.35.0 to 1.39.0</li> <li><code>cobra</code> from 1.7.0 to 1.8.0</li> <li><code>color</code> from 1.15.0 to 1.16.0</li> </ul>"},{"location":"about/release_notes/#050-october-09-2023","title":"[0.5.0] (October 09, 2023)","text":"<ul> <li>Added auto approve flag support to the <code>nuke</code> command</li> <li>doc updates</li> <li>Added more outputs to the workspaces <code>json</code> #150</li> <li>Added starter Jira GitHub Action to open issues when a new GH issue is opened</li> <li>Add the ability to set all destination workspaces to use a agent pool even if the source doesn't #126</li> <li>Updated dependencies</li> <li><code>go-tfe</code> from 1.32.1 to 1.35.0</li> <li><code>viper</code> from 1.16.0 to 1.17.0</li> </ul>"},{"location":"about/release_notes/#044-september-25-2023","title":"[0.4.4] (September 25, 2023)","text":"<ul> <li>When setting the new state serial in the destination state, read the source state file's serial instead of using a computed serial number.</li> </ul>"},{"location":"about/release_notes/#043-september-19-2023","title":"[0.4.3] (September 19, 2023)","text":"<ul> <li>Error logs created during state copy failures are now unique with a timestamp instead of being overwritten.</li> </ul>"},{"location":"about/release_notes/#042-september-18-2023","title":"[0.4.2] (September 18, 2023)","text":"<ul> <li>TFM now retries connections in the event network issues or API rate limiting prevents an operation from taking place. issue #143</li> <li>BUG FIX: An earlier introduction of the <code>tfm copy workspaces --state --last x</code> command prevented pagination when copying state files. Implemented a fix. TFM will now copy more than 20 state files per worksapce. issue #144</li> <li>TFM will now handle errors encountered when migrating a state file for a given workspace. In the event an error is encountered TFM will stop migrating states for the given workspace and proceed to the next workspace. It will output a <code>workspace_error_log.txt</code> file in the working directory.</li> </ul>"},{"location":"about/release_notes/#041-september-14-2023","title":"[0.4.1] (September 14, 2023)","text":"<ul> <li>BUG FIX: Applies after state migration would not upload the generated state file and output a 409 conflict error. TFM was not applying lineage to the workspace, but was copying the state file that contained a lineage. TFM now sets the lineage for the state files at the workspace level to match the one in the migrated state files.  issue #139</li> </ul>"},{"location":"about/release_notes/#010-june-8-2023","title":"[0.1.0] (June 8, 2023)","text":"<ul> <li>TFM is now in beta and Open Source! :fireworks:</li> <li>Added warning when no workspaces are configured</li> <li>Rename workspace-map to workspaces-map</li> <li>Fix VCS list function to use destination side when specified</li> <li>Added Delete cmd to delete a single workspace by it's name or unique ID</li> <li>Updated Repo per legal and compliance standards</li> <li>Added <code>CODEOWNERS</code></li> <li>Added delete vcs connection to remove a VCS connection from a workspace</li> <li>Added json output to selected commands</li> <li>Updated GO versions and SDKs</li> <li>Updated docs for beta release</li> </ul>"},{"location":"about/release_notes/#005-pre-alpha-april-27-2023","title":"[0.0.5-pre-alpha] (April 27, 2023)","text":"<ul> <li>Fixed migrated State lineage optional attribute</li> <li>Added tfm nuke workspaces (hidden command)</li> <li>Add tfm vcs list for configured org</li> </ul>"},{"location":"about/release_notes/#004-pre-alpha-april-14-2023","title":"[0.0.4-pre-alpha] (April 14, 2023)","text":"<ul> <li>Added tfm list workspaces</li> <li>Updated GitHub Pages for public viewing</li> </ul>"},{"location":"about/release_notes/#003-pre-alpha-april-6-2023","title":"[0.0.3-pre-alpha] (April 6, 2023)","text":"<ul> <li>Refactored Environment Variables/Config File</li> <li>Ability to specify a destination project ID for workspaces to be created in per tfm copy</li> <li>tfm list projects</li> <li>Updates to docs</li> </ul>"},{"location":"about/release_notes/#002-pre-alpha-march-3-2023","title":"[0.0.2-pre-alpha] (March 3, 2023)","text":"<ul> <li>Bug fix with state migration</li> </ul>"},{"location":"about/release_notes/#001-pre-alpha-february-18-2023","title":"[0.0.1-pre-alpha] (February 18, 2023)","text":"<ul> <li>Ready for Testing</li> <li>tfm copy workspaces</li> <li>tfm list</li> <li>Migration workflow</li> </ul>"},{"location":"about/release_notes/#unreleased-november-24-2022","title":"[Unreleased] (November 24, 2022)","text":"<p>Added</p> <ul> <li>initial repository layout/boiler plate created</li> <li>copy teams subcommand</li> <li>list orgs subcommand</li> <li>list teams subcommand</li> </ul> <p>Changed</p> <ul> <li>structure of <code>cmd</code> and its subcommands. Each sub command is now its in own directory and considered a package the <code>cmd</code> package imports in.</li> <li><code>tfclient</code> pkg created at top level, not related to <code>cmd</code> package</li> </ul> <p>Removed</p>"},{"location":"code/adr/","title":"ADR #0001: Initial Architectural Decision Records","text":"Architectural Decision Date Requestor Approver Notes Use Go to provide cross compiled binaries Oct 23 , 2022 Team Team Alternatives were Python scripts OR Bash scripts which could require further dependencies for customer to use Use Cobra for CLI Oct 23 , 2022 Team Team doormat-cli and tfx use it, it's good enough for us! Use Viper to handle config Oct 23 , 2022 Team Team Users should be able to provide configuration via Environment variables OR config file Oct 23 , 2022 Team Team Users should be able to re-run the same command to ensure any changes from source is copied/updates in the destination Oct 23 , 2022 Team Team Any objects/resources in the destination that already exist, will be skipped. Oct 23, 2022 Team Team eg If a workspace exists, it will not try to recreate it in the destination Workspace settings will always be updated in the destination from the source. This allow the tool be re-ran if any changes in the source occurs. Nov, 2022 Team Team"},{"location":"code/future/","title":"History","text":"<p>In between engagments, across variouble global timezones, the IS team asynchronysly worked on developing a MVP of <code>tfm</code>. </p> <p>Note: The IS Team had to learn Go and other toolsets as we all come from a sys admin and infrastructure engineer background. It has been a massive mind shift and challenge for the group that have embarked on this project. </p> <p></p> <p></p>"},{"location":"code/future/#mvp-pre-alpha-release","title":"MVP Pre-Alpha Release","text":"<p>Our MVP allows a customer to:</p> <ul> <li>Migrate Workspaces 1 to 1 from source to destination</li> <li>Migrate Workspace settings</li> <li>Migrate Workspace States</li> <li>Migrate Workspace Variables and Variable Sets</li> <li>Migrate Workspace Team Access and Permissions</li> <li>Assign VCS connections to Destination Workspaces based on a Map provided in the config file </li> </ul>"},{"location":"code/future/#future-work-and-roadmap","title":"Future Work and Roadmap","text":"<p>Note: We are looking for internal Beta testers to validate the migration process and provide feedback on scenarios our customers may encounter when migrating from TFE to TFC. </p> <p>Please reach out to one of our listed contact methods to get involved.</p> <p>Depending on time and pipeline, we do hope we can continue to progress this project to provide value to our customers. </p> <p>Check out our Github Projects page.</p> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request! </p>"},{"location":"code/mvp/","title":"MVP","text":"<p>Our MVP is defined as a Migration is accomplished by gathering facts/properties about the SOURCE objects and recreating them in the DESTINATION. Migration is not moving data, it is recreating it.</p>"},{"location":"code/mvp/#the-mvp-tool-should-have-the-ability-to","title":"The MVP tool should have the ability to:","text":"<ul> <li>Migrate Workspaces 1 to 1 from source to destination</li> <li>Migrate Workspace settings</li> <li>Migrate Workspace States</li> <li>Migrate Workspace Variables and Variable Sets</li> <li>Migrate Workspace Team Access and Permissions</li> <li>Assign VCS connections to Destination Workspaces based on a Map provided in the config file </li> </ul>"},{"location":"code/mvp/#roadmap","title":"Roadmap","text":"<p>There are more features we want to bring om the future. </p> <p>Check out our Road to TFM 1.0 project board. </p>"},{"location":"code/project-details/","title":"Project Details","text":""},{"location":"code/project-details/#repository-layout","title":"Repository Layout","text":"<p>Information on how this repository is structured.</p>"},{"location":"code/project-details/#files","title":"Files","text":"<pre><code>\u251c\u2500\u2500 cmd\n\u2502   \u251c\u2500\u2500 copy\n\u2502   \u251c\u2500\u2500 helper\n\u2502   \u251c\u2500\u2500 list\n\u2502   \u2514\u2500\u2500 root.go\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 output\n\u251c\u2500\u2500 site\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 tfclient\n\u251c\u2500\u2500 tfm\n\u2514\u2500\u2500 version\n</code></pre> <p><code>main.go</code> </p> <ul> <li>Entry point for the CLI, not much code here</li> </ul> <p><code>go.mod</code> and <code>go.sum</code> </p> <ul> <li>Go package dependencies</li> </ul> <p><code>CHANGELOG.md</code> </p> <ul> <li>Repository Changes by release</li> </ul> <p><code>version/version.go</code> </p> <ul> <li>Isolated package to create a struct for Version information</li> </ul> <p><code>cmds/</code> </p> <ul> <li>Directory for all commands/subcommands</li> </ul> <p><code>cmds/copy</code> </p> <ul> <li>each subcommand is placed into it's own directory package</li> </ul> <p><code>cmds/list</code></p> <ul> <li>each subcommand is placed into it's own directory package</li> </ul> <p><code>cmds/helper</code> </p> <ul> <li>Package that creates an easy set of functions to cleanly retrieve flag values regardless of how they were set</li> </ul> <p><code>tfclient</code> </p> <ul> <li>Package for to setup a <code>go-tfe</code> source and destination context to interact with the TFC/TFE APIs. </li> </ul> <p><code>output</code> </p> <ul> <li>Package to assist with outputing information for the user. </li> </ul> <p><code>docs</code> </p> <ul> <li>Directory for documentation about the tool. Powered by MKDocs and hosted on GitHub Pages</li> </ul> <p><code>.gihub/worksflow</code></p> <ul> <li>Github Action workflows<ul> <li><code>main.tml</code> automated builds</li> <li><code>release.yaml</code> binary release build</li> <li><code>unit-test.yml</code> automated features testing pipeline</li> <li><code>docs-deploy.yml</code> deployment of TFM Docs to GitHub pages</li> </ul> </li> </ul>"},{"location":"code/project-details/#technologies","title":"Technologies","text":""},{"location":"code/project-details/#language","title":"Language:","text":"<ul> <li><code>Go</code> , chosen to have the ability to cross compile for multiple operating systems. </li> </ul>"},{"location":"code/project-details/#go-libraries","title":"Go Libraries","text":"<ul> <li><code>cobra</code>, chosen to provide a modern CLI interface experience.</li> <li><code>viper</code>, chosen to handle configuration files</li> <li><code>go-tfe</code>, Go API client for TFE/TFC</li> </ul>"},{"location":"code/project-details/#architectural-decisions","title":"Architectural Decisions","text":"<p>See Architectural Decisions Records to understand how and why <code>tfm</code> has been built.</p>"},{"location":"code/project-details/#history-and-future-of-tfm","title":"History and Future of TFM","text":"<p>See Future Work / Roadmap</p>"},{"location":"commands/copy/","title":"Copy","text":"<p>Copy or Migrate, this sub commands takes X from source organization and copies (or migrates) it to the destination organization.</p> <pre><code># tfm copy -h\nCopy objects from Source Organization to Destination Organization\n\nUsage:\n  tfm copy [command]\nAvailable Commands:\n  teams       Copy Teams\n  varsets     Copy Variable Sets\n  workspaces  Copy Workspaces\n\nFlags:\n  -h, --help   help for copy\n\nGlobal Flags:\n      --config string   Config file, can be used to store common flags, (default is ./.tfm.hcl).\n\nUse \"tfm copy [command] --help\" for more information about a command.\n</code></pre>"},{"location":"commands/copy/#copy-sub-commands","title":"Copy sub commands","text":"<ul> <li><code>tfm copy teams</code></li> <li><code>tfm copy varsets</code></li> <li><code>tfm copy workspaces</code></li> </ul>"},{"location":"commands/copy/#possible-future-copy-commands-enhancements","title":"Possible Future copy commands enhancements","text":"<ul> <li><code>tfm copy modules</code></li> <li><code>tfm copy policy-sets</code></li> <li><code>tfm copy workspace --all</code></li> </ul> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request!</p>"},{"location":"commands/copy_projects/","title":"tfm copy projects","text":"<p><code>tfm copy projects</code> will take source organization projects and create them in the destination organization.</p> <p></p>"},{"location":"commands/copy_projects/#copy-all-projects","title":"Copy ALL projects","text":"<p><code>tfm copy projects</code> will copy all source projects and create them in the destination organization.</p> <p>Users will be required to confirm all projects is the desired operation if no <code>projects</code> list or <code>projects-map</code> map is not found in tfm config file (eg <code>~/.tfm.hcl</code>).</p> <p>To automate the confirmation, the flag <code>--autoapprove=true</code> can be provided during a <code>tfm</code> run.</p>"},{"location":"commands/copy_projects/#copy-a-list-of-projects","title":"Copy a list of projects","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of projects from the source TFE can be specified. <code>tfm</code> will use this list when running <code>tfm copy projects</code> and ensure the project exists or is created in the target.</p> <pre><code>#List of projects to create/check are migrated across to new TFC\n\"projects\" = [\n\"appAFrontEnd\",\n\"appABackEnd\",\n\"appBDataLake\",\n\"appBInfra\"\n]\n</code></pre>"},{"location":"commands/copy_projects/#rename-projects-in-destination-during-a-copy","title":"Rename projects in destination during a copy","text":"<p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-project-name=destination-project-name</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy project</code> to look at all projects in the source host and rename the destination project name.</p> <p>NOTE: Using the 'projects-map' configuration in your HCL config file will take precedence over the other 'projects' list feature which only lists source project names.</p> <p>```terraform</p>"},{"location":"commands/copy_projects/#a-list-of-sourcedestination-project-names-tfm-will-look-at-each-source-project-and-recreate-the-project-with-the-specified-destination-name","title":"A list of source=destination project names. TFM will look at each source project and recreate the project with the specified destination name.","text":"<p>\"projects-map\"=[   \"projectA=NewProjectA\",   \"projectZ=NewProjectX\" ]</p>"},{"location":"commands/copy_teams/","title":"tfm copy teams","text":"<p><code>tfm copy teams</code> will take source organization teams and create them in the destination organization. </p> <p></p>"},{"location":"commands/copy_teams/#organization-to-project-migration","title":"Organization to Project Migration","text":"<p>Additional option added to the command line, where permissions will be scaled back on the organizational level --- essentially read-only. Primary use case is when collapsing many organizations into a single organization with many projects. This does not set the permissions on a project, only copying over the teams to give them access to the new organization.  Project specific permissions will need to be set after the migration. </p> <p><code>tfm copy teams --org-to-project</code></p> <pre><code>tfm copy teams --org-to-project\nUsing config file: tfm/.tfm.hcl\nGetting list of teams from:  tfe.source.io\nFound 4 Teams\nGetting list of teams from:  tfe.destination.io\nFound 1 Teams\nMigrating with read-only access accepted-bat-admin\nMigrating with read-only access accepted-bat-power\nMigrating with read-only access accepted-bat-reader\nExists in destination will not migrate owners\nCreated team in destination organization: accepted-bat-admin\nNew ID:                                   team-Q73TX3Td5RxXoRtU\nCreated team in destination organization: accepted-bat-power\nNew ID:                                   team-LB3cjrHcKFHuqMUm\nCreated team in destination organization: accepted-bat-reader\nNew ID:                                   team-jwQymP7pP2R6ThWg\n</code></pre>"},{"location":"commands/copy_varsets/","title":"tfm copy varsets","text":"<p><code>tfm copy varsets</code> will take source organization variable sets and create them in the destination organization. </p> <p></p>"},{"location":"commands/copy_workspace_agents/","title":"tfm copy workspaces --agents","text":"<p><code>tfm copy workspaces --agents</code> or <code>tfm copy ws --agent</code> assigns a workspaces' agents from source to destination org.</p> <p>*NOTE: A agent-pool mapping must be provided in TFM's config file  *</p> <p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-agent-pool-ID=destination-agent-pool-ID</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspaces --agents</code> to look at all workspaces in the source host with the assigned source agent pool ID and assign the matching named workspace in the destination with the mapped destination agent pool ID.</p> <pre><code># A list of source=destination agent pool IDs TFM will look at each workspace in the source for the source agent pool ID and assign the matching workspace in the destination the destination agent pool ID.\nagents-map = [\n\"apool-DgzkahoomwHsBHcJ=apool-vbrJZKLnPy6aLVxE\",\n\"apool-DgzkahoomwHsBHc3=apool-vbrJZKLnPy6aLVx4\",\n\"apool-DgzkahoomwHsB125=apool-vbrJZKLnPy6adwe3\",\n\"test=beep\"\n]\n</code></pre>"},{"location":"commands/copy_workspace_remote_state_sharing/","title":"tfm copy workspaces --remote-state-sharing","text":"<p><code>tfm copy workspaces --remote-state-sharing</code> is used to set the remote state sharing setting on a workspace.</p> <p></p> <p>This flag is designed for users that want to copy the workspace state sharing setting to the workspaces in the destination.</p> <p>A workspace can be configured to share the state org wide or to selected workspaces. By default a workspace is set to being shared to selected workspaces, with no workspaces added. This flag will go through each workspace on the source organization, check the state sharing setting, and on the destination workspace configure it to be shared org wide, shared to selected workspaces with no workspaces added or shared to selected workspaces, with adding workspaces with matching names from the source workspace to the destination workspace.</p>"},{"location":"commands/copy_workspace_remote_state_sharing/#tfm-copy-workspaces-remote-state-sharing-consolidate-global","title":"tfm copy workspaces --remote-state-sharing --consolidate-global","text":"<p>There is one additional flag that can be used with <code>--remote-state-sharing</code> which is <code>--consolidate-global</code></p> <p></p> <p>This flag is to be used for companies that are doing an organization consolidation with their migration. For example, a company running TFE may have 10 orgs each with 10 workspaces, but in HCP Terraform they will have 1 orginzation with 100 workspaces. In one of the source orgs, they have 1 workspace that is shared with 9 other workspaces. When tfm migrates this workspace state sharing setting, in the destination org, that workspace would then be shared with 99 workspaces instead of just 9.</p> <p>The <code>--consolidate-global</code> flag is designed to prevent this from happening. For workspaces that are shared with no workspaces or shared with a list of workspaces that functionality is unchanged from above. However if a workspace is shared org wide tfm will behave differently and perform the following step:</p> <ol> <li>tfm will first set the destination workspace to being shared with selected workspaces only</li> <li>List all workspaces in the source org</li> <li>List all workspaces in the destination org</li> <li>Filter the two lists to only return workspaces that have the same name as workspaces from the source org</li> <li>Set that returned list of workspaces to be shared on the workspace in the destination org.</li> </ol> <p>This will result in the workspaces that are being shared org wide in the source org to only being shared with selected workspaces in the destination org and prevent the oversharing of the state with workspaces that shouldn't be accessing the state.</p>"},{"location":"commands/copy_workspace_run_triggers/","title":"tfm copy workspaces --run-triggers","text":"<p><code>tfm copy workspaces --run-triggers</code> is used to copy run triggers that have been configured on a source workspace to the destination workspace.</p> <p></p> <p>A workspace can be configured so that when one or more source workspaces have a successful apply of runs, this will trigger a new run in this workspace. By default it will only do an automatic plan that will require confirmation before applying, however the Auto-apply run triggers can be enabled so it will automatically apply a run if changes are detected.</p> <p>There is a limitation as of now, that the workspaces can't be changing names between the source and destination. For example: Workspace \"app-1\" is configured to have a run trigger from a workspace named \"networking\". When this flag is used, tfm will lookup the workspace names that have run triggers assigned on the \"app-1\" workspace. It will then on the migrated \"app-1\" workspace in the destination try and create a run trigger for the \"app-1\" workspace linked to a workspace named \"networking\" in the destination environment. If the \"network\" workspace is named differently in the destination tfm won't be able to find a matching workspace and won't create the run trigger</p>"},{"location":"commands/copy_workspace_state/","title":"tfm copy workspaces --state","text":"<p><code>tfm copy workspaces --state</code> or <code>tfm copy ws --state</code> copies a workspaces' states from source to destination org.</p> <p>In the event a state file encounters an error when attempting to migrate, TFM will stop migrating state files for that particular workspace and move to the next workspace.</p> <p></p>"},{"location":"commands/copy_workspace_state/#tfm-copy-workspaces-state-last-x","title":"tfm copy workspaces --state --last X","text":"<p><code>tfm copy workspaces --state --last X</code> or <code>tfm copy ws --state --last X</code> copies the last X number of workspaces' states from source to destination org.</p> <p>This flag is designed for users who only want to copy the last X number of states from a workspace.</p> <p>WARNING: This operation should not be ran more than once</p> <p>In the event a state file encounters an error when attempting to migrate, TFM will stop migrating state files for that particular workspace and move to the next workspace.</p> <p></p>"},{"location":"commands/copy_workspace_teamaccess/","title":"tfm copy workspaces --teamaccess","text":"<p><code>tfm copy workspaces --teamaccess</code> or <code>tfm copy ws --teamaccess</code> copies a workspaces' team access from source to destination org.</p> <p>NOTE: Teams must exist in the destination.</p> <p></p>"},{"location":"commands/copy_workspace_variables/","title":"tfm copy workspaces --vars","text":"<p><code>tfm copy workspaces --vars</code> or <code>tfm copy ws --vars</code> copies a workspaces' variables from source to destination org.</p> <p>NOTE: Any sensitive variables will ONLY be created in the destination. These values will need to be populated</p> <p></p>"},{"location":"commands/copy_workspace_vcs/","title":"tfm copy workspaces --vcs","text":"<p><code>tfm copy workspaces --vcs</code> or <code>tfm copy ws --vcs</code> assigns a vcs' from source to destination org.</p> <p>NOTE: A vcs mapping must be provided in TFM's</p> <p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-vcs-oauth-ID=destination-vcs-oauth-id-ID</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspaces --vcs</code> to look at all workspaces in the source host with the assigned source VCS oauth ID and assign the matching named workspace in the destination with the mapped destination VCS oauth ID.</p> <pre><code># A list of source=destination VCS oauth IDs. TFM will look at each workspace in the source for the source VCS oauth ID and assign the matching workspace in the destination with the destination VCS oauth ID.\nvcs-map=[\n\"ot-5uwu2Kq8mEyLFPzP=ot-coPDFTEr66YZ9X9n\",\n\"ot-gkj2An452kn2flfw=ot-8ALKBaqnvj232GB4\",\n]\n</code></pre> <p></p>"},{"location":"commands/copy_workspaces/","title":"tfm copy workspaces","text":"<p><code>tfm copy workspaces</code> or <code>tfm copy ws</code> creates a workspaces from source to destination org.</p> <p>After the workspaces are created at the destination, the next step is to copy the rest of the workspaces settings such as state, variables, team access, remote state sharing etc using <code>tfm copy workspace</code> flags.  </p> <p><code>tfm copy workspaces -h</code></p> <pre><code>Copy Workspaces from source to destination org\n\nUsage:\n  tfm copy workspaces [flags]\nAliases:\n  workspaces, ws\n\nFlags:\n      --add-prefix string      (optional) Only performed on destination workspaces, adds a prefix, if missing.\n      --add-suffix string      (optional) Only performed on destination workspaces, adds a suffix, if missing.\n      --agents                 Mapping of source Agent Pool IDs to destination Agent Pool IDs in config file\n      --consolidate-global     Consolidate global remote state sharing settings. Must be used with --remote-state-sharing flag\n      --create-dst-project     Creates destination project, if not existing. Defaults to source organization name.\n  -h, --help                   help for workspaces\n  -l, --last int               Copy the last X number of state files only.\n      --lock                   Lock all source workspaces\n      --plan-only              Only plan the copy operation without making changes\n      --remote-state-sharing   Copy remote state sharing settings\n      --run-triggers           Copy workspace run triggers\n      --skip-sensitive-vars    Skip copying sensitive variables. Must be used with --vars flag\n      --ssh                    Mapping of source ssh id to destination ssh id in config file\n      --state                  Copy workspace states\n      --teamaccess             Copy workspace Team Access\n      --unlock                 Unlock all source workspaces\n      --vars                   Copy workspace variables\n      --vcs                    Mapping of source vcs Oauth ID or GitHub App ID to destination vcs Oauth or GitHub App ID in config file\n      --workspace-id string    Specify one single workspace ID to copy to destination\n\nGlobal Flags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ~/.tfm.hcl).\n      --json            Print the output in JSON format\n</code></pre>"},{"location":"commands/copy_workspaces/#copying-workspaces","title":"Copying Workspaces","text":""},{"location":"commands/copy_workspaces/#copy-all-workspaces","title":"Copy ALL workspaces","text":"<p>Without providing any flags, <code>tfm copy workspaces</code> will copy all source workspaces and create them in the destination organization.</p> <p>Users will be required to confirm all workspaces is the desired operation if no <code>workspaces</code> or <code>workspaces-map</code> is not found in tfm config file (eg <code>~/.tfm.hcl</code>).</p> <p></p> <p>To automate the confirmation, the flag <code>--autoapprove=true</code> can be provided during a <code>tfm</code> run.</p> <p></p>"},{"location":"commands/copy_workspaces/#copy-a-list-of-workspaces","title":"Copy a list of workspaces","text":"<p>Note: Only use one of the following: <code>workspaces</code>, <code>exclude-workspaces</code>, or <code>workspaces-map</code>. </p> <p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of workspaces from the source TFE can be specified. <code>tfm</code> will use this list when running <code>tfm copy workspaces</code> and ensure the workspace exists or is created in the target.</p> <pre><code>#List of Workspaces to create/check are migrated across to new TFC\n\"workspaces\" = [\n\"appAFrontEnd\",\n\"appABackEnd\",\n\"appBDataLake\",\n\"appBInfra\"\n]\n</code></pre>"},{"location":"commands/copy_workspaces/#exclude-a-list-of-workspaces","title":"Exclude a list of workspaces","text":"<p>Note: Only use one of the following: <code>workspaces</code>, <code>exclude-workspaces</code>, or <code>workspaces-map</code>. </p> <p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of workspaces to exclude from the source TFE can be specified. <code>tfm</code> will use this list when running <code>tfm copy workspaces</code> and ensure the workspace is skipped when copying. </p> <pre><code>exclude-workspaces = [\n\"legacy-frontend\",\n\"empty-but-remotestatewsenabled\"\n]\n</code></pre>"},{"location":"commands/copy_workspaces/#rename-workspaces-in-destination-during-a-copy","title":"Rename Workspaces in destination during a copy","text":""},{"location":"commands/copy_workspaces/#using-workspaces-map-configuration","title":"Using Workspaces-Map Configuration","text":"<p>Note: Only use one of the following: <code>workspaces</code>, <code>exclude-workspaces</code>, or <code>workspaces-map</code>. </p> <p>As part of the HCL config file (<code>/home/user/.tfm.hcl</code>), a list of <code>source-workspace-name=destination-workspace-name</code> can be provided. <code>tfm</code> will use this list when running <code>tfm copy workspace</code> to look at all workspaces in the source host and rename the destination workspace name.</p> <p>Note: Using the 'workspaces-map' configuration in your HCL config file will take precedence over the other 'workspaces' list feature which only lists source workspace names.</p> <pre><code># A list of source=destination workspace names. TFM will look at each source workspace and recreate the workspace with the specified destination name.\n\"workspaces-map\"=[\n\"tfc-mig-vcs-0=tfc-mig-vcs-0\",\n\"tfc-mig-vcs-1=tfc-mig-vcs-1\",\n\"tfc-mig-vcs-2=tfc-mig-vcs-2\",\n\"tfc-mig-vcs-3=tfc-mig-vcs-30\",\n\"tfc-mig-vcs-4=tfc-mig-vcs-40\",\n]\n</code></pre> <p></p>"},{"location":"commands/copy_workspaces/#using-prefix-andor-suffix","title":"Using Prefix and/or Suffix","text":"<p>When migrating workspaces, if wanting to add a prefix and/or suffix to the name, add the following to the command:</p> <p><code>--add-prefix</code> and/or <code>--add-suffix</code>. </p> <p>For example <code>tfm copy workspaces  --add-prefix alpha --add-suffix dev</code></p> <ul> <li> <p>If the workspace is <code>frontend</code>, it will create it on the destination as <code>alpha-frontend-dev</code>. </p> </li> <li> <p>If the workspace was named <code>alpha-frontend</code>, it will only add the suffix <code>-dev</code>. </p> </li> <li> <p>If the workspace was <code>frontend-dev</code>, it will only add the prefix <code>alpha-</code>. </p> </li> </ul> <p>Example output: </p> <pre><code>**** Standardizing workspace names with prefix and suffix ****\n\nRenaming workspace:  bravo-dev -&gt; id-bravo-dev\nRenaming workspace:  charlie -&gt; id-charlie-dev\nRenaming workspace:  id-delta -&gt; id-delta-dev\n</code></pre>"},{"location":"commands/copy_workspaces/#existing-workspaces-in-destination","title":"Existing Workspaces in Destination","text":"<p>Any existing workspaces in the destination will be skipped.</p> <p></p>"},{"location":"commands/copy_workspaces/#copy-workspaces-into-projects","title":"Copy Workspaces into Projects","text":"<p>By default, a workspace will be copied over to the Default Project in the destination (eg TFC). Users can specify the project ID for the desired project to place all workspaces in the <code>tfm copy workspace</code> run.</p> <p>Utilize <code>tfm list projects --side destination</code> to determine the <code>project id</code>.</p> <p>Set either the environment variable:</p> <pre><code>export DST_TFC_PROJECT_ID=prj-XXXX\n</code></pre> <p>or specify the following in your <code>~/.tfm.hcl</code> configuration file.</p> <pre><code>dst_tfc_project_id=prj-xxx </code></pre>"},{"location":"commands/copy_workspaces/#create-new-project-during-copy","title":"Create New Project During Copy","text":"<p>Runs if <code>--create-dst-project</code> is specified. </p> <p>Checks if the destination project exists. It will attempt to create a project, as long as the name is at least 3 characters long and no more than 40 characters. </p> <p>By default, it will attempt to utilize the source organization name. </p>"},{"location":"commands/core/","title":"Core","text":"<p><code>tfm core</code></p> <p>The command used to prefix all commands related to assiting in migrating from terraform open source / community edition (also known as terraform core) to TFC/TFE.</p> <pre><code>tfm core -h\nCommand used to perform terraform open source (core) to TFE/TFC migration commands\n\nUsage:\n  tfm core [command]\n\nAvailable Commands:\n  cleanup           Removes up all cloned repositories from the clone_repos_path.\n  clone             Clone VCS repositories containing terraform code.\n  create-workspaces Create TFE/TFC workspaces for each cloned repo in the clone_repos_path that contains a pulled_terraform.tfstate file.\n  getstate          Initialize and get state from terraform repos in the clone_repos_path.\n  init-repos        Scan cloned repositories for Terraform configurations and build metadata\n  link-vcs          Link repos in the clone_repos_path to their corresponding workspaces in TFE/TFC.\n  migrate           Migrates opensource/community edition Terraform code and state to TFE/TFC in 1 continuous workflow.\n  remove-backend    Create a branch, remove Terraform backend configurations from cloned repos in clone_repos_path, commit the changes, and push to the origin.\n  upload-state      Upload .terraform/pulled_terraform.tfstate files from repos cloned into the clone_repos_path to TFE/TFC workspaces.\n\nFlags:\n  -h, --help   help for core\n\nGlobal Flags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ~/.tfm.hcl).\n      --json            Print the output in JSON format\n</code></pre> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request! </p>"},{"location":"commands/core_cleanup/","title":"tfm core cleanup","text":"<p><code>tfm core cleanup</code> deletes all of the cloned repositories from the <code>clone_repos_path</code>.</p>"},{"location":"commands/core_cleanup/#flags","title":"Flags","text":"<p><code>--autoapprove</code> will automatically approve the operation without confirmation prompt.</p>"},{"location":"commands/core_clone/","title":"tfm core clone","text":"<p><code>tfm core clone</code> will clone VCS repositories to the local system into the <code>clone_repos_path</code> you have defined in the config file.</p>"},{"location":"commands/core_clone/#supported-vcs","title":"Supported VCS","text":"<ul> <li>github</li> <li>gitlab</li> </ul>"},{"location":"commands/core_clone/#requirements","title":"Requirements","text":"<ul> <li>A supported <code>vcs_type</code> must be configured with one of the tfm supported VCS providers in the tfm config file.</li> </ul> <pre><code>vcs_type = github\n</code></pre>"},{"location":"commands/core_clone/#credentials","title":"Credentials","text":"<p>tfm will used the following configuration file settings to authenticate to VCS and clone the repos:</p> <p>The api token must have read access to the repositories to clone them.</p>"},{"location":"commands/core_clone/#github","title":"github","text":"<pre><code>github_token = \"api token\"\ngithub_organization = \"org\"\ngithub_username = \"username\"\n</code></pre>"},{"location":"commands/core_clone/#gitlab","title":"gitlab","text":"<pre><code>gitlab_token = \"api token\"\ngitlab_group = \"group102109\"\ngitlab_username = \"username\"\n</code></pre>"},{"location":"commands/core_clone/#clone-a-list-of-repositories","title":"Clone a List of Repositories","text":"<p>Provide a <code>repos_to_clone</code> list in the config file of repositories that you would like to clone for migration.</p> <pre><code>repos_to_clone =  [\n \"repos1\",\n \"repo2\",\n \"repo3\"\n]\n</code></pre>"},{"location":"commands/core_clone/#clone-all-repositories","title":"Clone All Repositories","text":"<p>Not providing a <code>repos_to_clone</code> list will result in tfm attempting to clone every repository in the GitHub org or GitLab group.</p>"},{"location":"commands/core_create-workspaces/","title":"tfm core create-workspaces","text":""},{"location":"commands/core_create-workspaces/#requirements","title":"Requirements","text":"<ul> <li>A <code>terraform_config_metadata.json</code> must exist in the tfm working directory. Run <code>tfm core init-repos</code> to generate one.</li> <li>Configure the following credentials in the tfm config file:</li> </ul> <pre><code>dst_tfc_hostname=\"app.terraform.io\"\ndst_tfc_org=\"organization\"\ndst_tfc_token=\"A token with permissions to create TFC/TFE workspaces\"\n</code></pre>"},{"location":"commands/core_create-workspaces/#create-workspaces","title":"Create Workspaces","text":"<p><code>tfm core create-workspaces</code> will use the <code>terraform_config_metadata.json</code> config file to create a TFC/TFE workspace in the <code>dst_tfc_org</code> defined in the config file for each repository.</p> <p>Workspace names are generated using the metadata file in the following format:</p> <ul> <li> <p>Config path using terraform ce workspaces: <code>repo_name+config_path+workspace_name</code></p> </li> <li> <p>Config path without terraform ce workspaces: <code>repo_name+config_path</code></p> </li> </ul> <p>As an example, the below metadata would create 2 TFC/TFE workspaces with the names:</p> <ul> <li><code>isengard-infra-east-primary-newisengard</code></li> <li><code>isengard-infra-east-primary-oldisengard</code></li> </ul> <pre><code>  {\n\"repo_name\": \"isengard\",\n\"config_paths\": [\n{\n\"path\": \"isengard/infra/east/primary\",\n\"workspace_info\": {\n\"uses_workspaces\": true,\n\"workspace_names\": [\n\"default\",\n\"newisengard\",\n\"oldisengard\"\n]\n}\n},\n</code></pre> <p>If a workspace already exists with the name of the repository tfm will return an error and continue on to the next workspace creation attempt.</p>"},{"location":"commands/core_create-workspaces/#out-of-band-workspace-creation","title":"Out of Band Workspace Creation","text":"<p>You can create workspaces using the terraform tfe provider instead of tfm. As long as the workspace names match the constructed workspace name that tfm is looking for then the state will still be uploaded.</p>"},{"location":"commands/core_create-workspaces/#future-updates","title":"Future Updates","text":"<p>Future updates are planned to also allow a variable set containing credentials to be assigned to the workspace the the time of creation. This will allow a plan to be run post migration to verify no changes are expected.</p>"},{"location":"commands/core_getstate/","title":"tfm core getstate","text":""},{"location":"commands/core_getstate/#requirements","title":"Requirements","text":"<ul> <li>Terraform community edition must be installed and in your path in the environment where this command is run.</li> <li>Credentials to authenticate to the configured backend must be configured in the environment where this command is run.</li> <li>A <code>terraform_config_metadata.json</code> must exist in the tfm working directory. Run <code>tfm core init-repos</code> to generate one.</li> </ul>"},{"location":"commands/core_getstate/#get-state","title":"Get State","text":"<p><code>tfm core getstate</code> will use the <code>terraform_config_metadata.json</code> config file to  iterate through all of the cloned repositories in the <code>clone_repos_path</code> and metadata <code>config_paths</code> to download the state files from the backend.</p> <p>tfm will use the locally installed terraform binary to perform <code>terraform init</code> and <code>terraform state pull &gt; .terraform/pulled_terraform.tfstate</code> commands.</p> <p>If tfm cannot successfully run a <code>terraform init</code> for a cloned repo tfm will return an error and continue with the next repository initilization attempt.</p>"},{"location":"commands/core_getstate/#terraform-ce-workspaces","title":"Terraform CE Workspaces","text":"<p>For any <code>config_path</code> with <code>uses_workspaces: true</code>, tfm will run <code>tfm workspace select</code> for each workspace in the <code>workspace_names</code> list and <code>terraform state pull &gt; .terraform/pulled_&lt;worspace name&gt;_terraform.tfstate</code>. The end result will be multiple state files within the <code>config_path</code> for each workspace.</p>"},{"location":"commands/core_init-repos/","title":"tfm core init-repos","text":""},{"location":"commands/core_init-repos/#requirements","title":"Requirements","text":"<ul> <li>Terraform community edition must be installed and in your path in the environment where this command is run.</li> <li>Credentials to authenticate to the configured backend must be configured in the environment where this command is run.</li> </ul>"},{"location":"commands/core_init-repos/#init-repos","title":"Init Repos","text":"<p><code>tfm core init-repos</code> will iterate through the cloned repositories in the <code>clone_repos_path</code> and build a <code>terraform_config_metadata.json</code> file that contains information about how the repositories are configured. It will determine all paths within the repo that contain terraform configurations and if terraform CE workspaces are being used.</p> <p>Any directory containing a <code>.tf</code> file with a <code>backend {}</code> configuration contained within a <code>terraform {}</code> configuration will be added to the metadata file as a <code>config_path</code>.</p> <pre><code>\"repo_name\": \"mordor2\",\n\"config_paths\": [\n{\n\"path\": \"mordor2/deployments/dev\",\n\"workspace_info\": {\n\"uses_workspaces\": false,\n\"workspace_names\": [\n\"default\"\n]\n}\n},\n{\n\"path\": \"mordor2/deployments/prod\",\n\"workspace_info\": {\n\"uses_workspaces\": false,\n\"workspace_names\": [\n\"default\"\n]\n}\n},\n</code></pre> <p>Any <code>config_path</code> that displays a terraform workspace in addition to the default one will be considered to be using terraform CE workspaces and <code>uses_workspaces</code> will be <code>true</code>. <code>workspace_names</code> will be populated with all of the terraform CE workspaces in use for the <code>config_path</code>.</p> <pre><code>  {\n\"repo_name\": \"rivendell\",\n\"config_paths\": [\n{\n\"path\": \"rivendell\",\n\"workspace_info\": {\n\"uses_workspaces\": true,\n\"workspace_names\": [\n\"default\",\n\"newrivendell\",\n\"oldrivendell\"\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"commands/core_link-vcs/","title":"tfm core link-vcs","text":""},{"location":"commands/core_link-vcs/#requirements","title":"Requirements","text":"<ul> <li>A <code>terraform_config_metadata.json</code> must exist in the tfm working directory. Run <code>tfm core init-repos</code> to generate one.</li> <li>The VCS provider must be configured in TFE/TFC and you must provide the VCS providers Oauth ID as the <code>vcs_provider_id</code> in the config file.</li> <li>Configure the following credentials in the tfm config file:</li> </ul> <pre><code>dst_tfc_hostname=\"app.terraform.io\"\ndst_tfc_org=\"organization\"\ndst_tfc_token=\"A token with permissions to create TFC/TFE workspaces\"\n</code></pre>"},{"location":"commands/core_link-vcs/#link-vcs","title":"Link VCS","text":"<p><code>tfm core link-vcs</code> will add the VCS connection to the workspaces that were created using <code>tfm core create-workspaces</code>. tfm will use the <code>terraform_config_metadata.json</code> file and look at each <code>config_path</code> and find a matching TFC/TFE workspace with a name that matches to the path.</p> <p>tfm will update the workspace settings using the <code>vcs_provider_id</code> defined in the config file and the <code>repo_name</code> that the <code>config_path</code> belongs to and map the repo to the workspace.</p>"},{"location":"commands/core_link-vcs/#out-of-band-workspace-creation","title":"Out of Band Workspace Creation","text":"<p>You can create workspaces using the terraform tfe provider instead of tfm. As long as the workspace names match the constructed workspace name that tfm is looking for then the state will still be uploaded. See the documentation for the <code>tfm create-workspaces</code> command for more information regarding workspace name creation.</p>"},{"location":"commands/core_migrate/","title":"tfm core migrate","text":""},{"location":"commands/core_migrate/#requirements","title":"Requirements","text":"<ul> <li>The VCS provider must be configured in TFE/TFC and you must provide the VCS providers Oauth ID as the <code>vcs_provider_id</code> in the config file.</li> <li>Configure the <code>clone_repos_path</code> in the config file.</li> <li>Configure the <code>vcs_type</code> with a supported vcs types in the config file.</li> <li>Authentication credentials for the cloned terraform configuration backends must be configured in the environment.</li> <li>Terraform CLI must be installed in the environment and in the path.</li> <li>Configure the following credentials in the tfm config file:</li> </ul> <pre><code>dst_tfc_hostname=\"app.terraform.io\"\ndst_tfc_org=\"organization\"\ndst_tfc_token=\"A token with permissions to create TFC/TFE workspaces\"\n</code></pre> <ul> <li>Configure the VCS credentials in the config file required for your supported vcs type</li> </ul> <p><code>tfm core migrate</code> will sequentially run all of the commands required to migrate terraform open source / community edition configurations to TFE/TFC workspace management.</p> <p>tfm will run the following commands in the following order when the migrate command is used:</p> <p><code>tfm core clone</code> <code>tfm core init-repos</code> <code>tfm core getstate</code> <code>tfm core create-worksapces</code> <code>tfm core upload-state</code> <code>tfm core link-vcs</code></p>"},{"location":"commands/core_migrate/#flags","title":"Flags","text":"<p><code>--include remove-backend</code> will add the <code>tfm core remove-backend</code> command to be run last as part of the <code>tfm core migrate</code> command. This requires a VCS API token with write permissions to the VCS repositories.</p>"},{"location":"commands/core_remove-backend/","title":"tfm core remove-backend","text":""},{"location":"commands/core_remove-backend/#requirements","title":"Requirements","text":"<ul> <li>Using this feature requires the VCS token defined in the configuration file to have write permissions to the contents of the repository.</li> <li>Add the following example to your confiuration file, modifying the github values based on your supported VCS type:</li> </ul> <pre><code>github_token = \"api token\"\ngithub_organization = \"org\"\ngithub_username = \"username\"\ncommit_message = \"Remove Terraform backend configuration\"\ncommit_author_name = \"username\"\ncommit_author_email = \"user@email.com\"\n</code></pre> <p><code>tfm core remove-backend</code> is used to assist in removing the <code>backend{}</code> configuration block from the <code>terraform{}</code> block in terraform configurations that have been migrated.</p> <p>tfm will use the <code>terraform_config_metadata.json</code> config file to iterate through all cloned repositories in the <code>clone_repos_path</code>. tmf will removed the backend from all <code>config_paths</code> for the repo.</p> <p>tfm will create a branch, commit the branch, and push it to the origin for code owners to create a PR.</p> <p>The following config file options are required to use this command:</p> <pre><code>commit_message = \"commitm message\"\ncommit_author_name = \"name\"\ncommit_author_email = \"email\"\n</code></pre>"},{"location":"commands/core_remove-backend/#flags","title":"Flags","text":"<p><code>--autoapprove</code> Automatically approve the operation without a confirmation prompt. <code>--comment</code> Will comment out the backend configuration instead of removing it.</p>"},{"location":"commands/core_remove-backend/#cleanup","title":"Cleanup","text":"<p><code>tfm core cleanup</code> can be used to remove all cloned repos from the <code>clone_repos_path</code></p>"},{"location":"commands/core_upload-state/","title":"tfm core upload-state","text":""},{"location":"commands/core_upload-state/#requirements","title":"Requirements","text":"<ul> <li>A <code>terraform_config_metadata.json</code> must exist in the tfm working directory. Run <code>tfm core init-repos</code> to generate one.</li> </ul>"},{"location":"commands/core_upload-state/#upload-state","title":"Upload State","text":"<p><code>tfm core upload-state</code> is used to upload the state files that were downloaded using the <code>tfm core getstate</code> command to workspace created with the <code>tfm core create-worksapces</code> command. tfm will use the <code>terraform_config_metadata.json</code> config file to iterate through all of the <code>config_paths</code>. Any config path containing a <code>.terraform/pulled_terraform.tfstate</code> or <code>.terraform/pulled_workspaceName_terraform.tfstate</code> file will have the state file uploaded to a workspace that matches with the <code>config_path</code>.</p> <p>Running this command multiple times will result in the same state file being uploaded multiple times.</p>"},{"location":"commands/core_upload-state/#out-of-band-workspace-creation","title":"Out of Band Workspace Creation","text":"<p>You can create workspaces using the terraform tfe provider instead of tfm. As long as the workspace names match the constructed workspace name that tfm is looking for then the state will still be uploaded. See the documentation for the <code>tfm create-workspaces</code> command for more information regarding workspace name creation.</p>"},{"location":"commands/delete/","title":"Delete","text":"<p>delete sub commands will delete  certain objects from an organization.</p> <p>DANGER this will delete things!</p> <pre><code># tfm delete -h\n\ndelete objects in an org. DANGER this will delete things!\n\nUsage:\n  tfm delete [command]\n\nAvailable Commands:\n  workspace   Workspace command\n\nFlags:\n  -h, --help          help for delete\n      --side string   Specify source or destination side to process\n\nGlobal Flags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ./.tfm.hcl).\n\nUse \"tfm delete [command] --help\" for more information about a command.\n</code></pre>"},{"location":"commands/delete/#delete-sub-commands","title":"delete sub commands","text":"<ul> <li><code>tfm delete workspace</code></li> </ul>"},{"location":"commands/delete/#possible-future-list-command-enhancements","title":"Possible Future list command enhancements","text":"<ul> <li><code>tfm delete projects</code></li> <li><code>tfm delete teams</code></li> <li><code>tfm delete variable</code></li> </ul> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request!</p>"},{"location":"commands/delete_workspace/","title":"tfm delete workspace","text":"<p><code>tfm delete workspace</code> will delete Workspace in an org</p>"},{"location":"commands/delete_workspace/#-workspace-id-flag","title":"<code>--workspace-id</code> flag","text":""},{"location":"commands/delete_workspace/#-workspace-name-flag","title":"<code>--workspace-name</code> flag","text":""},{"location":"commands/delete_workspace/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side=destination</code> or <code>--side=source</code>flag will delete the workspace of the destination TFE/TFC instance.</p>"},{"location":"commands/delete_workspace/#-autoapprove-flag","title":"<code>--autoapprove</code> flag","text":""},{"location":"commands/generate_config/","title":"Generate","text":"<p>Generate a template config <code>.tfm.hcl</code> file that you can then go back and configure. </p> <p>The template file will be created in the directory in which you run the <code>tfm generate config</code> command.</p> <pre><code># tfm generate config\n\ngenerate a .tfm.hcl file template\n\nUsage:\n  tfm generate [command]\n\nAvailable Commands:\n  config      config command\n\nFlags:\n  -h, --help   help for generate\n\nGlobal Flags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ./.tfm.hcl).\n      --json            Print the output in JSON format\n\nUse \"tfm generate [command] --help\" for more information about a command.\n</code></pre> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request! </p>"},{"location":"commands/list/","title":"List","text":"<p>list sub commands will list out certain resources from the source organization or destination organization.</p> <pre><code># tfm list -h\nList objects in an org\n\nUsage:\n  tfm list [command]\nAvailable Commands:\n  organization     List Organizations\n  projects         Projects command\nssh              ssh-keys command\nteams            Teams command\nvcs              List VCS Providers\n  workspace-filter Filter workspaces\n  workspaces       Workspaces command\nFlags:\n  -h, --help          help for list\n      --side string   Specify source or destination side to process\n\nGlobal Flags:\n      --config string   Config file, can be used to store common flags, (default is ./.tfm.hcl).\n\nUse \"tfm list [command] --help\" for more information about a command.\n</code></pre>"},{"location":"commands/list/#list-sub-commands","title":"list sub commands","text":"<ul> <li><code>tfm list organizations</code></li> <li><code>tfm list ssh</code></li> <li><code>tfm list teams</code></li> <li><code>tfm list vcs</code></li> <li><code>tfm list projects</code></li> <li><code>tfm list workspaces</code></li> </ul>"},{"location":"commands/list/#possible-future-list-command-enhancements","title":"Possible Future list command enhancements","text":"<ul> <li><code>tfm list agents</code></li> </ul> <p>Got an idea for a feature to <code>tfm</code>? Submit a feature request!</p>"},{"location":"commands/list_orgs/","title":"tfm list organization","text":"<p><code>tfm list organization</code> will list organization teams by default of the source TFE/TFC instance. <code>tmf list org</code> is also the shorthand command.</p> <p></p>"},{"location":"commands/list_orgs/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list organizations of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_projects/","title":"tfm list projects","text":"<p><code>tfm list projects</code> will list projects by default of the source TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_projects/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list projects of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_projects/#-json-flag","title":"<code>--json</code> flag","text":"<p>Providing the <code>--json</code> flag will output the project names and IDs in JSON format to make configuring the tfx configuration file more managable.</p> <p></p> <p>Note: Projects is a relatively new feature. If the source or destination TFE API endpoint does not support projects, <code>tfm</code> will error out. </p>"},{"location":"commands/list_ssh/","title":"tfm list ssh","text":"<p><code>tfm list ssh</code> will list ssh keys teams by default of the source TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_ssh/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list ssh keys of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_teams/","title":"tfm list teams","text":"<p><code>tfm list teams</code> will list teams keys teams by default of the source TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_teams/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list teams keys of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_vcs/","title":"tfm list vcs","text":"<p><code>tfm list vcs</code> will list vcs keys teams by default of the source TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_vcs/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list vcs keys of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_workspaces/","title":"tfm list workspaces","text":"<p><code>tfm list workspaces</code> will list workspaces by default of the source TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_workspaces/#-side-flag","title":"<code>--side</code> flag","text":"<p>Providing the <code>--side destination</code> flag will list workspaces of the destination TFE/TFC instance.</p> <p></p>"},{"location":"commands/list_workspaces/#-json-flag","title":"<code>--json</code> flag","text":"<p>Providing the <code>--json</code> flag will output information about the workspaces in JSON format to make configuring the tfx configuration file more managable and assist in automating tasks.</p> <p></p>"},{"location":"commands/lock_teams/","title":"tfm lock teams","text":""},{"location":"commands/lock_teams/#usage","title":"Usage","text":"<p><code>tfm lock teams</code></p> <pre><code>Set teams - excluding owner - permissions to read in organization\n\nUsage:\n  tfm lock teams [flags]\n\nAliases:\n  teams\n\nFlags:\n  -h, --help   help for teams\n\nGlobal Flags:\n      --autoapprove     Auto approve the tfm run. --autoapprove=true . false by default\n      --config string   Config file, can be used to store common flags, (default is ~/.tfm.hcl).\n      --json            Print the output in JSON format\n      --side string     Specify source or destination side to process\n</code></pre>"},{"location":"commands/lock_teams/#purpose","title":"Purpose","text":"<p>After an organization has been migrated, the first step would be ensuring all the workspaces are locked. </p> <p>To prevent any additional runs on the source organization, it is recommended locking down permissions on it only to owners. </p>"},{"location":"commands/lock_teams/#example","title":"Example","text":"<pre><code>tfm lock teams\n\nUsing config file: tfm/.tfm.hcl\nLocking teams in:  tfe.source.io\nLocking team:  accepted-bat-admin\nLocked team:  accepted-bat-admin\nLocking team:  accepted-bat-power\nLocked team:  accepted-bat-power\nLocking team:  accepted-bat-reader\nLocked team:  accepted-bat-reader\nSkipping team:  owners\n</code></pre>"},{"location":"configuration_file/config_file/","title":"TFM Configuration File Settings","text":"Parameter Supported Values Description Required src_tfe_hostname A hostname such as app.terraform.io The hostname of a TFE server that you are migrating from <code>yes</code> for TFE to TFC or TFC to TFC migrations src_tfe_org A TFC/TFE organization name The TFE/TFC Organization that you are migrating from <code>yes</code> for TFE to TFC or TFC to TFC migrations src_tfe_token A TFC/TFE Token A Token for the TFE/TFC Organization that you are migrating from <code>yes</code> for TFE to TFC or TFC to TFC migrations dst_tfc_hostname A hostname such as app.terraform.io The hostname of a TFE server or the TFC hostname that you are migrating to <code>yes</code> for all migrations dst_tfc_org A TFC/TFE organization name A TFC/TFE organization that you are migrating to <code>yes</code> for all migrations dst_tfc_token A TFC/TFE Token <code>yes</code> for all migrations repos_to_clone A list of VCS repository names Used with the<code>tfm core clone</code> command to clone a set of VCS repositories. If not provided, all VCS repos will be cloned <code>no</code> vcs-map A list of source=destination VCS oauth IDs TFM will look at each workspace in the source for the source VCS oauth ID and assign the matching workspace in the destination with the destination VCS oauth ID <code>yes</code> for <code>tfm copy workspaces --vcs</code> workspaces A list of workspaces to migrate from TFE to TFC or TFC org to TFC org Provide a list of source workspaces in the source TFC/TFE org to migrate. If not provided and no \"workspaces-map\" is detected, all workspaces will be migrated. <code>no</code> exclude-workspaces A list of workspaces to exclude when copying. Conflicts with workspaces and workspaces-map. <code>no</code> projects A list of projects to migrate across from TFE to TFC or TFC org to TFC org Provide a list of source projects in the source TFC/TFE org to migrate. If not \"projects-map\" if detected, all projects will be migrated <code>no</code> projects-map A list of source=destination project names TFM will look at each project in the source for the source project name and recreate the project in the destination with the new destination project name. Takes precedence over \"projects\" list. <code>no</code> workspaces-map A list of source=destination workspace names TFM will look at each source workspace and recreate the workspace with the specified destination name <code>no</code> commit_message A commit message Used when creating a branch for the <code>tfm core remove-backend</code> command <code>yes</code> only for the <code>tfm core remove-backend</code> command commit_author_name Author name to appear on commits Used when creating a branch for the <code>tfm core remove-backend</code> command <code>yes</code> only for the <code>tfm core remove-backend</code> command commit_author_email Author email to appear on commits Used when creating a branch for the <code>tfm core remove-backend</code> command <code>yes</code> only for the <code>tfm core remove-backend</code> command github_token A github token Used for <code>tfm core</code> commands when <code>vcs_type = \"github\"</code> <code>yes</code> only for <code>tfm core</code> migrations github_organization A github organization Used for <code>tfm core</code> commands when <code>vcs_type = \"github\" |</code>yes<code>only for</code>tfm core` migrations github_username A github username Used for <code>tfm core</code> commands when <code>vcs_type = \"github\" |</code>yes<code>only for</code>tfm core` migrations gitlab_token A gitlab username Used for <code>tfm core</code> commands when <code>vcs_type = \"gitlab\" |</code>yes<code>only for</code>tfm core` migrations gitlab_username A gitlab username Used for <code>tfm core</code> commands when <code>vcs_type = \"gitlab\"</code> <code>yes</code> only for <code>tfm core</code> migrations gitlab_group A gitlab group Used for <code>tfm core</code> commands when <code>vcs_type = \"gitlab\"</code> <code>yes</code> only for <code>tfm core</code> migrations clone_repos_path <code>yes</code> only for <code>tfm core</code> migrations vcs_type <code>yes</code> only for <code>tfm core</code> migrations vcs_provider_id <code>yes</code> only for <code>tfm core link-vcs</code> command migrations agents_map A list of source=destination agent pool IDs TFM will look at each workspace in the source for the source agent pool ID and assign the matching workspace in the destination the destination agent pool ID. Conflicts with agent-assignment <code>no</code> agent-assignment-id An agent Pool ID An agent pool ID to assign to all workspaces in the destination. Conflicts with agents-map <code>no</code> varsets_map A list of source=destination variable set names TFM will look at each source variable set and recreate the variable set with the specified destination name <code>no</code> ssh-map A list of source=destination SSH IDs TFM will look at each workspace in the source for the source SSH  ID and assign the matching workspace in the destination with the destination SSH ID <code>no</code>"},{"location":"migration/case-studies/","title":"Case Studies","text":"<p>The following are a list of proven case studies that have utilized <code>tfm</code> for its intended use cases.</p>"},{"location":"migration/case-studies/#financial-customer-tfe-to-tfc-migration","title":"Financial Customer - TFE to TFC migration","text":""},{"location":"migration/example-scenario-ce-tfc/","title":"Exmple Scenario for Migrating From Terraform Community Edition to TFC/TFE","text":""},{"location":"migration/example-scenario-ce-tfc/#happy-path-scenario","title":"Happy Path Scenario","text":"<p>Customer has terraform configurations managed by terraform community edition and would like to start managing these configurations with Terraform Cloud or Terraform Enterprise Workspaces.</p>"},{"location":"migration/example-scenario-ce-tfc/#vcs","title":"VCS","text":"<p>They are using a tfm supported Version Control System (VCS) to manage their terraform configurations. That VCS has been connceted to TFC/TFE and the code owners are ready to start creating workspaces to link to the VCS repositories.</p>"},{"location":"migration/example-scenario-ce-tfc/#state-files","title":"State Files","text":"<p>The state files for the VCS stored terraform configurations are stored in a supported terraform backend such as S3 and a backend{} block is configured within the terraform configurations. Code owners want to have the state managed by a TFE/TFC workspace.</p>"},{"location":"migration/example-scenario-ce-tfc/#terraform-vcs-repositories","title":"Terraform VCS Repositories","text":"<p>The following is a list of terraform configuration repositories in GitHub that an example customer has identified for migration:</p> <pre><code>application-infra\napplication-networking\napplication-database\napplication-rbac\n</code></pre> <p>A suitable repository for migration with tfm (at this time) has the following requirements:</p> <ul> <li>The repository contains the terraform configurations and the backend{} configuration block.</li> <li>The repository can be a monorepo with many configurations in many directory paths.</li> <li>The repository can be using 1 backend to share multiple state files using terraform CE workspaces.</li> </ul>"},{"location":"migration/example-scenario-ce-tfc/#preparing-the-destination-tfctfe-organization","title":"Preparing the destination (TFC/TFE organization)","text":"<p>In preparation of TFC, the following are completed to prepare for migration:</p> <ul> <li>GitHub connected as a VCS provider</li> <li>A variable set is configured with provider credentials to run the validation plan and apply on a workspace after migration.</li> </ul>"},{"location":"migration/example-scenario-ce-tfc/#setting-up-the-tfm-config-file","title":"Setting up the TFM config file","text":"<p>The customer configures the TFM file for migration.</p> <p>The following is what a <code>~/.tfm.hcl</code> file will look like for <code>tfm core</code> commands to clone only the identified repositories for migration.</p> <pre><code>dst_tfc_hostname=\"app.terraform.io\"\ndst_tfc_org=\"organization\"\ndst_tfc_token=\"token with permissions to create workspaces\"\nvcs_type = \"github\"\ngithub_token = \"token with read permissions to cloned repos\"\ngithub_organization = \"organization\"\ngithub_username = \"username\"\nclone_repos_path = \"/opt/tfm-migration/repos\"\n\n\"repos_to_clone\" = [\n  \"application-infra\",\n  \"application-networking\",\n  \"application-database\",\n  \"application-rbac\"\n]\n\n# Only used only with the tfm core link-vcs command\nvcs_provider_id = \"ot-K9ofy9Rr9R9Bo3Nj\" \n\n# Only used with the tfm core remove-backend command\ncommit_message = \"commit message\"\ncommit_author_name = \"name\"\ncommit_author_email = \"email\"\n</code></pre>"},{"location":"migration/example-scenario-ce-tfc/#clone-repos","title":"Clone Repos","text":"<p>With the configuration file configured the migration team clones the repos to the local host or execution environment.</p> <p><code>tfm core clone</code></p> <p>tfm populates the <code>clone_repos_path</code> with the 4 repos defined in the config file above.</p>"},{"location":"migration/example-scenario-ce-tfc/#build-the-metadata-file","title":"Build the Metadata File","text":"<p>With the repos cloned locally the migration team builds a metadata file with information about how the repositories are using terraform.</p> <p><code>tfm core init-repos</code></p> <p>tfm looks through all paths in the repo and identifies paths using a <code>.tf</code> file with a <code>terraform { backend {} }</code> configuration. tfm also runs <code>tfm workspace list</code> and determines if the path is using terraform ce workspaces. tfm builds a <code>terraform_config_metadata.json</code> file in the tfm working directory that contains information about each repo.</p> <pre><code>  {\n\"repo_name\": \"isengard\",\n\"config_paths\": [\n{\n\"path\": \"isengard/infra/east/primary\",\n\"workspace_info\": {\n\"uses_workspaces\": true,\n\"workspace_names\": [\n\"default\",\n\"newisengard\",\n\"oldisengard\"\n]\n}\n},\n{\n\"path\": \"isengard/infra/east/secondary\",\n\"workspace_info\": {\n\"uses_workspaces\": false,\n\"workspace_names\": [\n\"default\"\n]\n}\n},\n</code></pre>"},{"location":"migration/example-scenario-ce-tfc/#get-state","title":"Get State","text":"<p>With the repos cloned locally and the metadata file built the migration team retrieves the state files for each repo.</p> <p><code>tfm core getstate</code></p> <p>tfm will use the <code>terraform_config_metadata.json</code> config file to  iterate through all of the cloned repositories in the <code>clone_repos_path</code> and metadata <code>config_paths</code> to download the state files from the backend.</p> <p>tfm will use the locally installed terraform binary to perform <code>terraform init</code> and <code>terraform state pull &gt; .terraform/pulled_terraform.tfstate</code> commands.</p> <p>If tfm cannot successfully run a <code>terraform init</code> for a cloned repo tfm will return an error and continue with the next repository initilization attempt.</p> <p>For any <code>config_path</code> with <code>uses_workspaces: true</code>, tfm will run <code>tfm workspace select</code> for each workspace in the <code>workspace_names</code> list and <code>terraform state pull &gt; .terraform/pulled_&lt;worspace name&gt;_terraform.tfstate</code>. The end result will be multiple state files within the <code>config_path</code> for each workspace.</p>"},{"location":"migration/example-scenario-ce-tfc/#create-workspaces","title":"Create Workspaces","text":"<p>The migration team creates TFC/TFE workspaces for each terraform configuration and state file to be managed by TFE/TFC</p> <p><code>tfm core create-workspaces</code></p> <p>tfm will use the <code>terraform_config_metadata.json</code> config file to create a TFC/TFE workspace in the <code>dst_tfc_org</code> defined in the config file for each repository.</p> <p>Workspace names are generated using the metadata file in the following format:</p> <ul> <li> <p>Config path using terraform ce workspaces: <code>repo_name+config_path+workspace_name</code></p> </li> <li> <p>Config path without terraform ce workspaces: <code>repo_name+config_path</code></p> </li> </ul> <p>As an example, the below metadata would create 2 TFC/TFE workspaces with the names:</p> <ul> <li><code>isengard-infra-east-primary-newisengard</code></li> <li><code>isengard-infra-east-primary-oldisengard</code></li> </ul> <pre><code>  {\n\"repo_name\": \"isengard\",\n\"config_paths\": [\n{\n\"path\": \"isengard/infra/east/primary\",\n\"workspace_info\": {\n\"uses_workspaces\": true,\n\"workspace_names\": [\n\"default\",\n\"newisengard\",\n\"oldisengard\"\n]\n}\n},\n</code></pre>"},{"location":"migration/example-scenario-ce-tfc/#migrate-state","title":"Migrate State","text":"<p>The migration team can now upload state to the workspaces.</p> <p><code>tfm core upload-state</code></p> <p><code>tfm core upload-state</code> is used to upload the state files that were downloaded using the <code>tfm core getstate</code> command to workspace created with the <code>tfm core create-worksapces</code> command. tfm will use the <code>terraform_config_metadata.json</code> config file to iterate through all of the <code>config_paths</code>. Any config path containing a <code>.terraform/pulled_terraform.tfstate</code> or <code>.terraform/pulled_workspaceName_terraform.tfstate</code> file will have the state file uploaded to a workspace that matches with the <code>config_path</code>.</p>"},{"location":"migration/example-scenario-ce-tfc/#link-repositories","title":"Link Repositories","text":"<p>The migration team can now attach the repository containing the terraform code to the workspace.</p> <p><code>tfm core link-vcs</code></p> <p>tfm will use the <code>terraform_config_metadata.json</code> file and look at each <code>config_path</code> and find a matching TFC/TFE workspace with a name that matches to the path.</p> <p>tfm will update the workspace settings using the <code>vcs_provider_id</code> defined in the config file and the <code>repo_name</code> that the <code>config_path</code> belongs to and map the repo to the workspace.</p>"},{"location":"migration/example-scenario-ce-tfc/#validation","title":"Validation","text":"<p>The migration team assigns a TFC/TFE variable set to each workspace with the correct credentials required to authenticate with the provider.</p> <p>The migration team can now run a terraform plan and apply on the workspace and expect no changes to be made. If changes are being shown then verify there were no changes expected before migration.</p>"},{"location":"migration/example-scenario-ce-tfc/#post-tfm-migration-tasks","title":"Post <code>tfm</code> Migration Tasks","text":""},{"location":"migration/example-scenario-ce-tfc/#cleanup","title":"Cleanup","text":"<p>The migration team has verified that everything is working and can begin the cleanup process.</p> <p>The team wants to remove the stale backend{} configurations from all of the repos.</p> <p><code>tfm core remove-backend</code> iterates through all of the cloned repos and looks at all files ending in a <code>.tf</code> extension for a <code>backend{}</code> configuration. tfm creates a branch, comments out the backend, commits the change, and pushes the branch.</p> <p>tfm DOES NOT create a PR. That is the responsibility of the code owners.</p> <p><code>tfm core cleanup</code> will remove all of the cloned repos from the clone path defined in the configuration file.</p>"},{"location":"migration/example-scenario-ce-tfc/#example-github-actions-pipeline","title":"Example GitHub Actions Pipeline","text":"<p>Coming soon</p>"},{"location":"migration/example-scenario-tfe-tfc/","title":"Exmple Scenario for Migrating From TFE to TFC","text":""},{"location":"migration/example-scenario-tfe-tfc/#happy-path-scenario-tfe-to-tfc","title":"Happy Path Scenario - TFE to TFC","text":"<p>Customer has been running Terraform Enterprise and has decided to move to Terraform Cloud. As part of choosing to buy than build their suite of platform tools and services, they are embarking on using as many tools as a service. Terraform Cloud is one of them.</p>"},{"location":"migration/example-scenario-tfe-tfc/#vcs","title":"VCS","text":"<p>They have already migrated or starting using a Version Control System (VCS) in the cloud (eg Github, Gitlab or Azure DevOps).</p> <p>Teams are in the process of migrating off an on premesis VCS and into a cloud VCS. A goal is for all TFC workspaces to be backed by the new cloud VCS.</p>"},{"location":"migration/example-scenario-tfe-tfc/#identity-provider-sso","title":"Identity Provider (SSO)","text":"<p>For their Identity Provider, they already utilize Azure AD with TFE.</p>"},{"location":"migration/example-scenario-tfe-tfc/#tfe-organization","title":"TFE Organization","text":"<p>Customer has only one organization in their TFE. No consolidation of organizations is required when migrating to one TFC organization.</p>"},{"location":"migration/example-scenario-tfe-tfc/#tfe-workspaces","title":"TFE Workspaces","text":"<p>The following is a list of workspaces that have been targeted for initial migrations.</p> <p> <p></p> <p>A suitable workspace for migration has the following requirements:</p> <ul> <li>A clean Terraform Plan with no changes has been ran recently.</li> <li>Terraform Version of the workspace is at least 0.13.x above</li> <li>Any Workspace variables that are secrets can be regenerated or retrieved to be assigned in the destination workspace.</li> </ul>"},{"location":"migration/example-scenario-tfe-tfc/#preparing-the-destination-tfc-organization","title":"Preparing the destination (TFC organization)","text":"<p>In preparation of TFC, the following are completed to prepare for migration:</p> <ul> <li>GitHub connected as a VCS provider</li> <li>Agent Pools created and connected to TFC</li> <li>Certain workspaces require the use of Cloud Agents</li> <li>Variable Sets created in TFC to mimic what was configured in TFE.</li> <li>Optional: use <code>tfm copy varsets</code></li> <li>New secrets have been regenerated for certain Variable Sets.</li> <li>Azure AD SSO integration setup</li> <li>Optional: use <code>tfm copy teams</code> if TFC teams will be the same teams from TFE.</li> <li>Projects created else <code>tfm</code> will utilize the \"Default Project\" if DST_PROJECT_ID is not set during a <code>tfm copy workspace</code>.</li> <li><code>tfm list projects</code> can be used to determine the project ID.</li> </ul>"},{"location":"migration/example-scenario-tfe-tfc/#discover-current-tfe-details","title":"Discover current TFE details","text":""},{"location":"migration/example-scenario-tfe-tfc/#list-commands","title":"List Commands","text":"<p>The following commands can assist with initial discovery.</p> <ul> <li><code>tfm list orgs</code></li> <li><code>tfm list teams</code></li> <li><code>tfm list vcs</code></li> <li><code>tfm list workspaces</code></li> <li><code>tfm list projects</code> (If using TFE release greater than v202302-1)</li> </ul> <p></p>"},{"location":"migration/example-scenario-tfe-tfc/#more-discovery-tools","title":"More Discovery Tools","text":"<p><code>tfm</code> primary focus was on the migration/copy side of the process. If you would like further discovery tools , we recommend using <code>tfx</code></p>"},{"location":"migration/example-scenario-tfe-tfc/#setting-up-the-tfm-config-file","title":"Setting up the TFM config file","text":"<p>The following is what a <code>~/.tfm.hcl</code> file will look like for <code>tfm copy workspaces</code> to use.</p> <p><code>tfm list *</code> commands could be of use to fill in parts of the tfm.hcl config file.</p> <pre><code>#List of Workspaces to create/check are migrated across to new TFC\n\"workspaces\" = [\n  \"api-test\",\n  \"tf-demo-workflow\",\n  \"azure-deveops-private-infra\"\n]\n\n# A list of source=destination agent pool IDs TFM will look at each workspace in the source \n# for the source agent pool ID and assign the matching workspace in the destination the \n# destination agent pool ID.\nagents-map = [\n  \"apool-DgzkahoomwHsBHcJ=apool-vbrJZKLnPy6aLVxE\",\n  \"apool-DgzkahoomwHsBHc3=apool-vbrJZKLnPy6aLVx4\",\n  \"apool-DgzkahoomwHsB125=apool-vbrJZKLnPy6adwe3\"\n]\n'\n# A list of source=destination Variable Set IDs. TFM will look at each workspace \n# in the source for the source variable set ID and assign the matching workspace \n# in the destination with the destination variable set ID.\nvarsets-map = [\n  \"Azure-creds=New-Azure-Creds\",\n  \"aws-creds2=New-AWS-Creds\",\n  \"SourceVarSet=DestVarSet\"\n ]\n\n # A list of source=destination VCS oauth IDs. TFM will look at each workspace in the source for the source VCS oauth ID and assign the matching workspace in the destination with the destination VCS oauth ID.\nvcs-map=[\n  \"ot-5uwu2Kq8mEyLFPzP=ot-coPDFTEr66YZ9X9n\",\n]\n</code></pre>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-teams","title":"Migrate Teams","text":"<p><pre><code>tfm copy teams\n</code></pre> </p>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-variable-sets","title":"Migrate Variable Sets","text":"<p><pre><code>tfm copy varsets\n</code></pre> </p>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-workspaces","title":"Migrate workspaces","text":"<pre><code>tfm copy workspaces\n</code></pre>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-workspace-state","title":"Migrate Workspace state","text":"<pre><code>tfm copy workspaces --state\n</code></pre>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-workspace-team-access","title":"Migrate Workspace Team Access","text":"<p><pre><code>tfm copy workspaces --teamaccess\n</code></pre> </p>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-workspace-variables","title":"Migrate Workspace Variables","text":"<pre><code>tfm copy workspaces --vars\n</code></pre>"},{"location":"migration/example-scenario-tfe-tfc/#migrate-workspace-vcs-settings","title":"Migrate Workspace VCS settings","text":"<pre><code>tfm copy workspaces --vcs\n</code></pre>"},{"location":"migration/example-scenario-tfe-tfc/#post-tfm-migration-tasks","title":"Post <code>tfm</code> Migration Tasks","text":""},{"location":"migration/example-scenario-tfe-tfc/#basic-verfications","title":"Basic Verfications","text":"<p>After migration/copy of workspaces and states, it's recommended to verify all is there.</p> <p>Use the exsting <code>list</code> tools as mentioned in Discovery Section. Comparing <code>tfm list workspaces</code> using <code>--side [source|destination]</code> flag will verify if all have been migrated across.</p> <p></p>"},{"location":"migration/example-scenario-tfe-tfc/#code-changes","title":"Code Changes","text":"<p>Workspaces that are migrated will require code changes if they utilize the source destination Private Module Registry. Migrating to another TFE/TFC requires the module sources of the original Private Module Registry source to be changed to the destination address.</p>"},{"location":"migration/example-scenario-tfe-tfc/#lock-workspaces","title":"Lock Workspaces","text":"<p>Destination Workspaces that have been migrated but have not fully cut over should be locked.</p>"},{"location":"migration/example-scenario-tfe-tfc/#verify-workspaces-with-clean-plans","title":"Verify Workspaces with clean plans","text":"<p>Each workspace in the destination should be verified a clean plan can be executed.</p>"},{"location":"migration/example-scenario-tfe-tfc/#example-github-actions-pipeline","title":"Example GitHub Actions Pipeline","text":"<p>The following is an example GitHub Actions pipeline that uses the <code>tfm</code> binary. An assumption is made that some customers may want to pipeline the migration as <code>tfm</code> has been developed to be idempotent. You can also view the e2e.workflow file used for nightly testing of TFM for a more robust example.</p> <pre><code>name: TFM migration pipeline\njobs:\ntest:\nruns-on: ubuntu-latest\nenv: SRC_TFE_HOSTNAME: ${{vars.SOURCEHOSTNAME}}\nSRC_TFE_ORG: ${{vars.SOURCEORGANIZATION}}\nSRC_TFE_TOKEN: ${{secrets.SOURCETOKEN}}\nDST_TFC_HOSTNAME: ${{vars.DESTINATIONHOSTNAME}}\nDST_TFC_ORG: ${{vars.DESTINATIONORGANIZATION}}\nDST_TFC_TOKEN: ${{secrets.DESTINATIONTOKEN}}\nRUNNUKE: ${{ github.event.inputs.RunNuke }}\nDST_TFC_PROJECT_ID: ${{ vars.DST_PROJECT_ID}}\nsteps:\n- name: Print version\nrun: ./tfm --version\n- name: List organization source\nrun: ./tfm list organization\n- name: List organization destination\nrun: ./tfm list organization --side destination\n- name: List ssh key id source\nrun: ./tfm list ssh\n- name: List ssh key id destination\nrun: ./tfm list ssh --side destination\n- name: List teams source\nrun: ./tfm list teams\n- name: List teams destination\nrun: ./tfm list teams --side destination\n- name: List vcs source\nrun: ./tfm list vcs\n- name: List vcs destination\nrun: ./tfm list vcs --side destination\n- name: List projects destination\nrun: ./tfm list projects --side destination\n- name: Migrate teams\nrun: ./tfm copy teams --config test/configs/.unit-test-tfm.hcl\n- name: List teams destination\nrun: ./tfm list teams --side destination\n- name: Migrate varsets\nrun: ./tfm copy varsets --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces\nrun: ./tfm copy workspaces --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces ssh\nrun: ./tfm copy workspaces --ssh --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces state\nrun: ./tfm copy workspaces --state --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces teamaccess\nrun: ./tfm copy workspaces --teamaccess --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces vars\nrun: ./tfm copy workspaces --vars --config test/configs/.unit-test-tfm.hcl\n- name: Migrate Workspaces vcs\nrun: ./tfm copy workspaces --vcs --config test/configs/.unit-test-tfm.hcl\n- name: List projects destination\nrun: ./tfm list projects --side destination\n- name: List workspaces destination\nrun: ./tfm list workspaces --side destination\n</code></pre>"},{"location":"migration/journey-tfe-tfc/","title":"Migration Journey TFE to TFC","text":"<p>The above is an estimated customer experience when migrating TFE to TFC (or another TFE). Offered and ran as a Fast Track offering, we run customer through a proven delivery methodolgy Implementation Services have been using to adopt other HashiCorp products.</p>"},{"location":"migration/journey-tfe-tfc/#technical-planning","title":"Technical Planning","text":"<p>Technical Planning Sprint (TPS) is a series of workshops to discuss and work through the technical requirements of a migration. Customer engineers and any technical hands on personal are encouraged to join these sessions to clarify what will be executed in the upcoming implementation sprint/s.</p> <ul> <li>Review necessary prerequisites and verify ability to execute the <code>tfm</code> tool within customer environment.</li> <li>Ascertain if individuals with appropriate access levels will be involved in the migration process</li> <li>Normal TFC configuration items (VCS, IdP, Terraform Cloud Agents) that will be covered</li> <li>Agents - Differences for on-prem deployments TFE vs. TFC.</li> </ul>"},{"location":"migration/journey-tfe-tfc/#tfm-copy","title":"tfm copy","text":"<p>This phase introduces the <code>tfm</code> tool and demonstrates it capabilities. We plan to migrate the workspaces that were identified in technical planning. The following are the outcomes of this phase.</p> <ul> <li>Confirm Migration pre-requisites</li> <li>VCS, Teams, Agent Pools, Workspace readiness</li> <li>Copy of Workspaces</li> <li>States</li> <li>Variables</li> <li>Team Access *</li> <li>Agent Pools *</li> <li>Copy Teams *</li> <li>Workspace locked in destination</li> </ul>"},{"location":"migration/journey-tfe-tfc/#cutover-planning","title":"Cutover Planning","text":"<p>Migrating/Copying over workspaces into the destination TFC or TFE is easy with <code>tfm</code>, however there are other external dependencies and factors that need to be planned. Some examples of this are:</p> <ul> <li>When does each team cutover completely from using the older TFE workspaces and the new TFC workspaces.</li> <li>Does VCS repository need to be cutover or locked ?</li> <li>Verifying workspaces are Terraform planning cleanly (source and destination)</li> <li>Ensure the old TFE workspace cannot be updated or utilized by existing engineers/developers</li> <li>If there any updates to the source workspace state, re-run <code>tfm copy</code> to ensure the destination is up to date</li> <li>Using <code>tfm list</code> to verify workspaces that have been cut over/migrated</li> <li>Communication plan and lead time of cutover.</li> </ul>"},{"location":"migration/journey-tfe-tfc/#future-cutovers","title":"Future Cutovers","text":"<p>There are times some workspaces cannot be migrated directly with <code>tfm</code> due to external factors. These workspaces may require future work to make it compatible to migrate to TFC or it is a timing and scheduling requirement.</p>"},{"location":"migration/pre-migration-ce-tfc/","title":"HashiCorp Implementation Services","text":"<p>Migrating from Terraform Community Edition to Terraform Cloud or Terraform Enterprise.</p> <p>Note: The Terraform Community Edition migration as part of <code>tfm</code> has been deprecated in favor of tf-migrate. The CE migration feature has not been removed from <code>tfm</code> however it will not be receiving further developments.</p>"},{"location":"migration/pre-migration-ce-tfc/#pre-migration-questionnaire","title":"Pre-Migration Questionnaire","text":""},{"location":"migration/pre-migration-ce-tfc/#software","title":"Software","text":"<ul> <li>Are you permitted to run TFM in an environment that can access the supported VCS and TFC/TFE at the same time?</li> <li>Terraform CLI must be installed in the execution environment to use the tfm features.</li> <li>The local execution environment running tfm must be able to authenticate to the backend store state files to use the tfm features for downloading state.</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#terraform-cloud-or-terraform-enterprise","title":"Terraform Cloud or Terraform Enterprise","text":"<ul> <li>TFE Version?  (If applicable)</li> <li>Number of TFE/TFC Organizations that you wish to split terraform configurations amongst if more than 1.</li> <li>Which VCS? Only supported vcs types at this time.</li> <li>Is the VCS routable from the internet and serving a publicly trusted certificate?</li> <li>Once configurations are migrated, will TFE/TFC have network connectivity to manage the inrastructure and download the required providers and modules defined in your code?</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#terraform-community-edition-configurations","title":"Terraform Community Edition Configurations","text":"<ul> <li>How many configurations do you believe you have?</li> <li>Where are state files being stored today? (s3, azure, etc.)</li> <li>How are VCS repositories that contain terraform community edition configurations structured?</li> <li>Are there repositories that contain multiple configurations split between miltiple directories?</li> <li>Are you using terraform workspaces and managing multiple state files with 1 backend configuration in the same terraform configuration?</li> <li>Are you using third party tools like terragrunt to manage terraform configurations?</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#project-flow","title":"Project Flow","text":"<p>The migration propject has 6 key phases:</p> <ol> <li>Discovery</li> <li>Planning</li> <li>Configuration</li> <li>Technical Validation</li> <li>Migration</li> <li>End-User Validation</li> </ol>"},{"location":"migration/pre-migration-ce-tfc/#discovery","title":"Discovery","text":"<ul> <li>Determine current Terraform Community Edition landscape</li> <li>Version Control Providers (Which VCS)</li> <li>Structure(s) of VCS repositories (monorepos, terraform workspaces in use, terragrunt or other 3rd party tools being used)</li> <li>Estimated number of repositories and terraform configurations per repository.</li> <li>Estimated number of total terraform configurations to migrate.</li> <li>Establish Workspace criteria required to be eligible for migration. Migrating everything or just some.</li> <li>Discuss workspace creation</li> <li>tfm only has the capabilities to create workspaces with constructed from the metadata file tfm generates with the following format: <code>repo_name+config_path+workspace_name</code> for configurations using terraform ce workspaces and <code>repo_name+config_path</code> for configurations not using terraform ce workspaces.</li> <li>Future releases aim to allow workspace names to be modified during creation or map to existing worksapces created with the terraform tfe provider.</li> <li>Discuss State Migration on Workspaces (Latest State only)</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#planning","title":"Planning","text":"<ul> <li>Gather the requied credentials for migrating with tfm</li> <li>VCS token with read permissions for each repo of interest</li> <li>(Optional) VCS token with write permissions for each repo of interest. This is only needed if you intend to use the remove-backend command to assist in commenting out backend configurations post migraion.</li> <li>Terraform Cloud or Enterprise token with permissiosn to create workspaces.</li> <li>Determine if TFE/TFC workspaces will have the ability to manage the resources after migration. Will TFE/TFC have network access and authentication capabilities to manage the migrated resources?</li> <li>Establish nigration Timeline and Priority</li> <li>Sometimes multiple configuration files are created to migrate sets of configurations to TFE/TFC at intervals.</li> <li>Establish Validation process as agreed upon with the Customer.</li> <li>Running a plan and apply after the migration to verify no changes are expected.</li> <li>How to assign credentials to all of the workspaces after migration.</li> <li>Establish a control plane to run tfm from to perform migration tasks. Requires access to the Terraform Enterprise/Terraform Cloud destination org and the VCS at the same time. Requires credentials to authenticate to the terraform backends.</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#configuration","title":"Configuration","text":"<ul> <li>Configure the TFE/TFC Version Control connection</li> <li>Configure the tfm configuration file</li> <li>Install terraform in the working environment</li> <li>Configure backend authentication credentials in the working environment</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#technical-validation-proof-of-concept","title":"Technical Validation (Proof of Concept)","text":"<ul> <li>Leveraging a subset of VCS repos, migrate enough to verify the migration process.</li> <li>Test validation steps on the items migrated configurations by running a plan and apply in the worksapce.</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#migrate","title":"Migrate","text":"<ul> <li>Perform migration of terraform configurations in the priority order identified in planning.</li> <li>( Optional) Run tfm core migrate to migrate an entire GitHub org or Gitlab Project at once.</li> <li>( Recommended ) Run tfm core commands in the order defined:<ul> <li>tfm core clone</li> <li>tfm core init-repos</li> <li>tfm core getstate</li> <li>tfm core create-workspaces</li> <li>tfm core upload-state</li> <li>tfm core link-vcs</li> </ul> </li> <li>Run plan and apply on TFC/TFE workspaces and verify no changes are expected.</li> <li> <p>Validate.</p> </li> <li> <p>tfm core remove-backend if desired to cleanup the code and push branches.</p> </li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#end-user-validation","title":"End-User Validation","text":"<ul> <li>Run plan and apply on TFC/TFE workspaces and verify no changes are expected.</li> <li>Validate.</li> </ul>"},{"location":"migration/pre-migration-ce-tfc/#migration-flow","title":"Migration Flow","text":"<p>The high level migration flow has 6 key steps:</p> <ol> <li>Clone terraform configuration repositories</li> <li>Build the metadata file describing the layout of each repo</li> <li>Retreieve state files</li> <li>Create TFC/TFE workspaces</li> <li>Upload state files to workspaces</li> <li>Link configuration repositories to workspaces</li> <li>Cleanup configuration code</li> </ol>"},{"location":"migration/pre-migration-tfe-tfc/","title":"HashiCorp Implementation Services","text":"<p>Migrating from Terraform Enterprise to Terraform Cloud.</p> <p>Updated copy of questionaire found at Google Drive.</p>"},{"location":"migration/pre-migration-tfe-tfc/#pre-migration-questionnaire","title":"Pre-Migration Questionnaire","text":""},{"location":"migration/pre-migration-tfe-tfc/#terraform-enterprise-tfe-current-deployment-source","title":"Terraform Enterprise, TFE, Current Deployment (Source)","text":"<ul> <li>TFE Version?</li> <li>Number of TFE Organizations?</li> <li>Number of users/teams using TFE (10/100/1000)?</li> <li>Number of workspaces (per organization)?</li> <li>Number of Modules in the PMR (per organization)?</li> <li>Number of Sentinel Policies/Sets (per organization)?</li> <li>Number of TFE Teams (per organization)?</li> <li>Which VCS?</li> <li>Is the VCS routable from the internet and serving a publicly trusted certificate?</li> <li>Which IdP?</li> <li>Where are you deploying infrastructure from TFE today?</li> <li>Do you have the ability to run Python scripts or a binary tool from a developer workstation?</li> <li>Is there an established maintenance window for transitioning from TFE to TFC?</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#terraform-cloud-tfc-new-deployment-destination","title":"Terraform Cloud, TFC, New Deployment (Destination)","text":"<ul> <li>How many TFC Organizations?</li> <li>Do you want to migrate everything to TFC?</li> <li>Do you require Cloud Agents?</li> <li>Will the workspaces all be going into the same Org?</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#project-flow","title":"Project Flow","text":"<p>The high level Migration path has 6 key components:</p> <ol> <li>Discovery</li> <li>Planning</li> <li>Configuration</li> <li>Technical Validation</li> <li>Migration</li> <li>End-User Validation</li> </ol>"},{"location":"migration/pre-migration-tfe-tfc/#discovery","title":"Discovery","text":"<ul> <li>Determine current Terraform Enterprise landscape</li> <li>Version Control Providers (Which VCS, Count, Distribution of Use)</li> <li>Identity Platform (Which IdP, Number of Teams)</li> <li>Modules in the Private Module Registry (Count, Publishing Method, No. of Versions, Frequency of Change)</li> <li>Policies and Policy Sets (Count, Publishing Method, Frequency of Change)</li> <li>Workspaces (Count, Publishing Method, Frequency of Change)</li> <li>Inventory Terraform Enterprise footprint (Aids in tracking completed work)</li> <li>Establish Workspace criteria required to be eligible for migration</li> <li>Determine if Cloud Agents are required (Typically due to on-premise deployments from Terraform)</li> <li>Identify how Cloud Agents are deployed and configured</li> <li>Determine if any utilities are needed within the agent (Local-Exec, Custom Providers, etc...)</li> <li>Discuss new user onboarding in Terraform Cloud (Slight differences from Terraform Enterprise)</li> <li>Discuss State Migration on Workspaces (Latest State only)</li> <li>Evaluate current use of Workspace Variables marked as \"sensitive\" (these values are write-only from the API)</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#planning","title":"Planning","text":"<ul> <li>Identify Admins of VCS and IdP that will be needed to configure both in Terraform Cloud</li> <li>Determine order in which to migrate Modules, Policies, and most importantly Workspaces</li> <li>Establish Workspace Migration Timeline and Priority</li> <li>Establish Workspace Deprecation process in Terraform Enterprise (Common Options: Locking, Deleting, Archiving)</li> <li>Establish Validation process as agreed upon with the Customer</li> <li>Determine required API tokens needed for the migration (must have access to all needed Organizations)</li> <li>Terraform Enterprise token with Owner permissions(Source)</li> <li>Terraform Cloud token with Owner permissions (Destination)</li> <li>Determine if Workspace Code changes are required (Module Sourcing, Provider Initialization)</li> <li>Design Cloud Agent Pool structure and required infrastructure, including networking and authentication routes</li> <li>Determine how to update destination Workspace Variables that are marked as \"sensitive\" in the source Workspace</li> <li>Establish a control plane to run python from to perform migration tasks (Requires access to both Terraform Enterprise and Terraform Cloud)</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#configuration","title":"Configuration","text":"<ul> <li>Configure Terraform Cloud for Version Control</li> <li>Configure Terraform Cloud for Single Sign-On</li> <li>Create Teams in Terraform Cloud</li> <li>(If Needed) Create Cloud Agent Pools, Deploy Agents, and register the Agents with their respective Agent Pool</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#technical-validation-proof-of-concept","title":"Technical Validation (Proof of Concept)","text":"<ul> <li>Leveraging a subset of Modules, Policies, and Workspaces, migrate enough to verify the migration process</li> <li>Test validation steps on the items migrated</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#migrate","title":"Migrate","text":"<ul> <li>Perform Migration of Modules in the Private Module Registry, and Validate</li> <li>Perform Migration of Sentinel Policies and Policy Sets, and Validate</li> <li>Perform Migration of Workspaces in priority order, and Validate</li> <li>Run Plan on Terraform Enterprise</li> <li>Perform any code changes to the Terraform consumed by the Workspace</li> <li>Migrate Workspace to Terraform Cloud</li> <li>Run Plan on Terraform Cloud (verify it matches the Plan from Terraform Enterprise)</li> <li>Validate</li> <li>Deprecation of Terraform Enterprise Workspace</li> </ul>"},{"location":"migration/pre-migration-tfe-tfc/#end-user-validation","title":"End-User Validation","text":"<ul> <li>Verify end users can access and leverage Workspaces in Terraform Cloud as they would have in Terraform Enterprise</li> </ul>"},{"location":"migration/pre-requisites-ce-tfc/","title":"Pre-Requisites For Migrating From Terraform Community Edition to TFC/TFE","text":"<p>Note: The Terraform Community Edition migration as part of <code>tfm</code> has been deprecated in favor of tf-migrate. The CE migration feature has not been removed from <code>tfm</code> however it will not be receiving further developments.</p>"},{"location":"migration/pre-requisites-ce-tfc/#the-following-pre-reqs-should-be-completed-in-the-destination-tfctfe-before-using-tfm","title":"The following pre-reqs should be completed in the destination TFC/TFE before using tfm","text":"<ul> <li>Supported VCS provisioned in TFC/TFE</li> </ul>"},{"location":"migration/pre-requisites-ce-tfc/#the-following-pre-reqs-are-required-to-use-the-tfm-features-for-cloning-vcs-repositories","title":"The Following pre-reqs are Required to use the tfm Features for Cloning VCS Repositories","text":"<ul> <li>A VCS token with permissions to read each repository of interestin the GitHub Organization.</li> <li>A Github organization or GitLab Project depending on the supported vcs in use.</li> <li>A VCS username.</li> </ul>"},{"location":"migration/pre-requisites-ce-tfc/#the-following-pre-reqs-are-required-to-use-the-tfm-features-for-removing-backend-configurations-from-cloned-repositories","title":"The Following pre-reqs are Required to use the tfm Features for Removing Backend Configurations From Cloned Repositories","text":"<ul> <li>A VCS token permissions to write contents to repositories.</li> </ul>"},{"location":"migration/pre-requisites-ce-tfc/#the-following-pre-reqs-are-required-to-use-the-tfm-features-for-retrieving-state-files","title":"The Following pre-reqs are Required to use the tfm Features for Retrieving State Files","text":"<ul> <li>The execution environment must provide credentials to the backend</li> <li>Terraform CLI must be installed in the execution environment</li> <li>The <code>tfm core init-repos</code> command must be run to create a metadata file</li> </ul>"},{"location":"migration/pre-requisites-ce-tfc/#constraints","title":"Constraints","text":"<p>The following are environment/configuration constraints where a migration using tfm cannot occur:</p> <ul> <li>At the time of this writing tfm only supports the cloning of GitHub and GitLab repositories.</li> <li>At this time there is no way to handle CLI driven workspace migrations.</li> <li>At this time there is no way to handle variable migration.</li> </ul>"},{"location":"migration/pre-requisites-tfe-tfc/","title":"Pre-Requisites","text":""},{"location":"migration/pre-requisites-tfe-tfc/#the-following-pre-reqs-should-be-completed-in-the-destination-tfctfe-before-using-tfm","title":"The following pre-reqs should be completed in the destination TFC/TFE before using tfm","text":"<ul> <li>A TFC/TFE Token with owner permissions is required</li> <li>Existing Workspaces should have a recent clean TF Plan/Apply</li> <li>VCS provisioned</li> <li>VCS Map provided as configuration file</li> <li>Teams created</li> <li>Team map provided as configuration file</li> <li>Agent Pools created</li> <li>Agent map provided as configuration file</li> <li>Variable Sets created</li> <li>Variable Set map provided as configuration file</li> <li>Variables with secrets known OR can be regenerated</li> </ul>"},{"location":"migration/pre-requisites-tfe-tfc/#constraints","title":"Constraints","text":"<p>The following are environment/configuration constraints where a migration of workspaces cannot occur:</p> <ul> <li>TFE Instances utilising a Custom (Alternative Terraform Build Worker image) as TFC does not support this feature.</li> <li>TFE environments utilising Network Mirror Provider protocol</li> <li>A strategy for this is to change the workspace configuration in TFC to utilize Cloud Agents which requires further strategy and planning.</li> <li>Workspaces pre 0.12 cannot use Cloud Agents in TFC.</li> <li>They would need to be upgraded by workspace owners before migrating to TFC.</li> <li>Customers with ONLY private Version Control Systems (VCS), TFC doees have a list of supported VCS solutions, however if private, some features of TFC may not work as intented.</li> <li>Workspaces that utilize <code>local-exec</code> or <code>remote-exec</code> provisioner.</li> </ul>"},{"location":"migration/supported-vcs/","title":"Supported VCS Types for TFM CE to TFC Migrations","text":"<p>Note: The Terraform Community Edition migration as part of <code>tfm</code> has been deprecated in favor of tf-migrate. The CE migration feature has not been removed from <code>tfm</code> however it will not be receiving further developments.</p>"},{"location":"migration/supported-vcs/#supported-vcs-types","title":"Supported VCS Types","text":"<p>The following VCS types are supported values for the <code>vcs_type</code> configuration in the tfm configuration file at this time.</p> <ul> <li>github</li> <li>gitlab</li> </ul>"},{"location":"migration/supported-vcs/#required-github-configuration-file-settings","title":"Required Github Configuration File Settings","text":"<pre><code>github_token = \"api token\"\ngithub_organization = \"org\"\ngithub_username = \"username\"\n</code></pre>"},{"location":"migration/supported-vcs/#required-gitlab-configuration-file-settings","title":"Required Gitlab Configuration File Settings","text":"<pre><code>gitlab_token = \"api token\"\ngitlab_group = \"group102109\"\ngitlab_username = \"username\"\n</code></pre>"}]}